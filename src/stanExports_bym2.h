// Generated by rstantools.  Do not edit by hand.

/*
    geostan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    geostan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with geostan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_bym2_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bym2");
    reader.add_event(97, 95, "end", "model_bym2");
    return reader;
}
template <bool propto, typename T0__>
typename boost::math::tools::promote_args<T0__>::type
icar_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                     const int& N,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 3;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((-(0.5) * dot_self(subtract(stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(node1), stan::model::nil_index_list()), "phi"), stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(node2), stan::model::nil_index_list()), "phi")))) + normal_log(sum(phi), 0, (0.001 * N))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
icar_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                     const int& N,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2, std::ostream* pstream__) {
    return icar_normal_lpdf<false>(phi,N,node1,node2, pstream__);
}
struct icar_normal_lpdf_functor__ {
    template <bool propto, typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                     const int& N,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2, std::ostream* pstream__) const {
        return icar_normal_lpdf(phi, N, node1, node2, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_bym2 : public prob_grad {
private:
        int n;
        int dx;
        int n_edges;
        std::vector<int> y;
        std::vector<int> node1;
        std::vector<int> node2;
        matrix_d x;
        vector_d offset;
        vector_d alpha_prior;
        std::vector<row_vector_d> beta_prior;
        vector_d sigma_prior;
        vector_d alpha_tau_prior;
        int has_re;
        int n_ids;
        std::vector<int> id;
        double scaling_factor;
        vector_d log_E;
public:
    model_bym2(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_bym2(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_bym2_namespace::model_bym2";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "dx", "int", context__.to_vec());
            dx = int(0);
            vals_i__ = context__.vals_i("dx");
            pos__ = 0;
            dx = vals_i__[pos__++];
            check_greater_or_equal(function__, "dx", dx, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "n_edges", "int", context__.to_vec());
            n_edges = int(0);
            vals_i__ = context__.vals_i("n_edges");
            pos__ = 0;
            n_edges = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_edges", n_edges, 0);
            current_statement_begin__ = 12;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(n));
            y = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("node1", "n_edges", n_edges);
            context__.validate_dims("data initialization", "node1", "int", context__.to_vec(n_edges));
            node1 = std::vector<int>(n_edges, int(0));
            vals_i__ = context__.vals_i("node1");
            pos__ = 0;
            size_t node1_k_0_max__ = n_edges;
            for (size_t k_0__ = 0; k_0__ < node1_k_0_max__; ++k_0__) {
                node1[k_0__] = vals_i__[pos__++];
            }
            size_t node1_i_0_max__ = n_edges;
            for (size_t i_0__ = 0; i_0__ < node1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "node1[i_0__]", node1[i_0__], 1);
                check_less_or_equal(function__, "node1[i_0__]", node1[i_0__], n);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("node2", "n_edges", n_edges);
            context__.validate_dims("data initialization", "node2", "int", context__.to_vec(n_edges));
            node2 = std::vector<int>(n_edges, int(0));
            vals_i__ = context__.vals_i("node2");
            pos__ = 0;
            size_t node2_k_0_max__ = n_edges;
            for (size_t k_0__ = 0; k_0__ < node2_k_0_max__; ++k_0__) {
                node2[k_0__] = vals_i__[pos__++];
            }
            size_t node2_i_0_max__ = n_edges;
            for (size_t i_0__ = 0; i_0__ < node2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "node2[i_0__]", node2[i_0__], 1);
                check_less_or_equal(function__, "node2[i_0__]", node2[i_0__], n);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("x", "n", n);
            validate_non_negative_index("x", "dx", dx);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n,dx));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, dx);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = dx;
            size_t x_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("offset", "n", n);
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec(n));
            offset = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < offset_j_1_max__; ++j_1__) {
                offset(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("alpha_prior", "3", 3);
            context__.validate_dims("data initialization", "alpha_prior", "vector_d", context__.to_vec(3));
            alpha_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("alpha_prior");
            pos__ = 0;
            size_t alpha_prior_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < alpha_prior_j_1_max__; ++j_1__) {
                alpha_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("beta_prior", "dx", dx);
            validate_non_negative_index("beta_prior", "3", 3);
            context__.validate_dims("data initialization", "beta_prior", "row_vector_d", context__.to_vec(3,dx));
            beta_prior = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(3, Eigen::Matrix<double, 1, Eigen::Dynamic>(dx));
            vals_r__ = context__.vals_r("beta_prior");
            pos__ = 0;
            size_t beta_prior_j_1_max__ = dx;
            size_t beta_prior_k_0_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < beta_prior_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_prior_k_0_max__; ++k_0__) {
                    beta_prior[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("sigma_prior", "3", 3);
            context__.validate_dims("data initialization", "sigma_prior", "vector_d", context__.to_vec(3));
            sigma_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("sigma_prior");
            pos__ = 0;
            size_t sigma_prior_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < sigma_prior_j_1_max__; ++j_1__) {
                sigma_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("alpha_tau_prior", "3", 3);
            context__.validate_dims("data initialization", "alpha_tau_prior", "vector_d", context__.to_vec(3));
            alpha_tau_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("alpha_tau_prior");
            pos__ = 0;
            size_t alpha_tau_prior_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < alpha_tau_prior_j_1_max__; ++j_1__) {
                alpha_tau_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "has_re", "int", context__.to_vec());
            has_re = int(0);
            vals_i__ = context__.vals_i("has_re");
            pos__ = 0;
            has_re = vals_i__[pos__++];
            check_greater_or_equal(function__, "has_re", has_re, 0);
            check_less_or_equal(function__, "has_re", has_re, 1);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "n_ids", "int", context__.to_vec());
            n_ids = int(0);
            vals_i__ = context__.vals_i("n_ids");
            pos__ = 0;
            n_ids = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_ids", n_ids, 0);
            current_statement_begin__ = 23;
            validate_non_negative_index("id", "n", n);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(n));
            id = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            size_t id_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "id[i_0__]", id[i_0__], 0);
                check_less_or_equal(function__, "id[i_0__]", id[i_0__], n_ids);
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "scaling_factor", "double", context__.to_vec());
            scaling_factor = double(0);
            vals_r__ = context__.vals_r("scaling_factor");
            pos__ = 0;
            scaling_factor = vals_r__[pos__++];
            check_greater_or_equal(function__, "scaling_factor", scaling_factor, 0);
            // initialize transformed data variables
            current_statement_begin__ = 28;
            validate_non_negative_index("log_E", "n", n);
            log_E = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            stan::math::fill(log_E, DUMMY_VAR__);
            stan::math::assign(log_E,stan::math::log(offset));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 33;
            validate_non_negative_index("beta", "dx", dx);
            num_params_r__ += dx;
            current_statement_begin__ = 34;
            validate_non_negative_index("alpha_re_tilde", "n_ids", n_ids);
            num_params_r__ += n_ids;
            current_statement_begin__ = 35;
            validate_non_negative_index("alpha_tau", "has_re", has_re);
            num_params_r__ += (1 * has_re);
            current_statement_begin__ = 36;
            validate_non_negative_index("v", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 37;
            validate_non_negative_index("u", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 38;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_bym2() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 32;
        if (!(context__.contains_r("intercept")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable intercept missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("intercept");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "intercept", "double", context__.to_vec());
        double intercept(0);
        intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable intercept: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "dx", dx);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(dx));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(dx);
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("alpha_re_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_re_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_re_tilde");
        pos__ = 0U;
        validate_non_negative_index("alpha_re_tilde", "n_ids", n_ids);
        context__.validate_dims("parameter initialization", "alpha_re_tilde", "vector_d", context__.to_vec(n_ids));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re_tilde(n_ids);
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            alpha_re_tilde(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha_re_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_re_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("alpha_tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_tau");
        pos__ = 0U;
        validate_non_negative_index("alpha_tau", "has_re", has_re);
        context__.validate_dims("parameter initialization", "alpha_tau", "double", context__.to_vec(has_re));
        std::vector<double> alpha_tau(has_re, double(0));
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            alpha_tau[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_tau_i_0_max__ = has_re;
        for (size_t i_0__ = 0; i_0__ < alpha_tau_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_tau[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_tau: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("v")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v");
        pos__ = 0U;
        validate_non_negative_index("v", "n", n);
        context__.validate_dims("parameter initialization", "v", "vector_d", context__.to_vec(n));
        Eigen::Matrix<double, Eigen::Dynamic, 1> v(n);
        size_t v_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < v_j_1_max__; ++j_1__) {
            v(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(v);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("u")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable u missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("u");
        pos__ = 0U;
        validate_non_negative_index("u", "n", n);
        context__.validate_dims("parameter initialization", "u", "vector_d", context__.to_vec(n));
        Eigen::Matrix<double, Eigen::Dynamic, 1> u(n);
        size_t u_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
            u(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(u);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable u: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("logit_rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logit_rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logit_rho");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "logit_rho", "double", context__.to_vec());
        double logit_rho(0);
        logit_rho = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(logit_rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logit_rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 32;
            local_scalar_t__ intercept;
            (void) intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                intercept = in__.scalar_constrain(lp__);
            else
                intercept = in__.scalar_constrain();
            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(dx, lp__);
            else
                beta = in__.vector_constrain(dx);
            current_statement_begin__ = 34;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_re_tilde;
            (void) alpha_re_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_re_tilde = in__.vector_constrain(n_ids, lp__);
            else
                alpha_re_tilde = in__.vector_constrain(n_ids);
            current_statement_begin__ = 35;
            std::vector<local_scalar_t__> alpha_tau;
            size_t alpha_tau_d_0_max__ = has_re;
            alpha_tau.reserve(alpha_tau_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_tau_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_tau.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_tau.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 36;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v;
            (void) v;  // dummy to suppress unused var warning
            if (jacobian__)
                v = in__.vector_constrain(n, lp__);
            else
                v = in__.vector_constrain(n);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u;
            (void) u;  // dummy to suppress unused var warning
            if (jacobian__)
                u = in__.vector_constrain(n, lp__);
            else
                u = in__.vector_constrain(n);
            current_statement_begin__ = 38;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 39;
            local_scalar_t__ logit_rho;
            (void) logit_rho;  // dummy to suppress unused var warning
            if (jacobian__)
                logit_rho = in__.scalar_constrain(lp__);
            else
                logit_rho = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 43;
            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("convolved_re", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> convolved_re(n);
            stan::math::initialize(convolved_re, DUMMY_VAR__);
            stan::math::fill(convolved_re, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("f", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f(n);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 46;
            stan::math::assign(rho, inv_logit(logit_rho));
            current_statement_begin__ = 47;
            stan::math::assign(convolved_re, add(multiply(stan::math::sqrt((rho / scaling_factor)), v), multiply(stan::math::sqrt((1 - rho)), u)));
            current_statement_begin__ = 48;
            stan::math::assign(f, add(add(log_E, intercept), multiply(convolved_re, sigma)));
            current_statement_begin__ = 49;
            if (as_bool(dx)) {
                current_statement_begin__ = 49;
                stan::math::assign(f, add(f, multiply(x, beta)));
            }
            current_statement_begin__ = 50;
            if (as_bool(has_re)) {
                current_statement_begin__ = 51;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 52;
                    stan::model::assign(f, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(f, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "f") + (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, get_base1(id, i, "id", 1), "alpha_re_tilde", 1))), 
                                "assigning variable f");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            if (stan::math::is_uninitialized(rho)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: rho";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rho: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "rho", rho, 0);
            check_less_or_equal(function__, "rho", rho, 1);
            current_statement_begin__ = 44;
            size_t convolved_re_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < convolved_re_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(convolved_re(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: convolved_re" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable convolved_re: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 45;
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(f(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: f" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 58;
            lp_accum__.add(poisson_log_log<propto__>(y, f));
            current_statement_begin__ = 59;
            lp_accum__.add(icar_normal_lpdf<propto__>(v, n, node1, node2, pstream__));
            current_statement_begin__ = 60;
            lp_accum__.add(std_normal_log<propto__>(u));
            current_statement_begin__ = 61;
            lp_accum__.add(std_normal_log<propto__>(logit_rho));
            current_statement_begin__ = 62;
            lp_accum__.add(std_normal_log<propto__>(sigma));
            current_statement_begin__ = 63;
            lp_accum__.add(student_t_log<propto__>(intercept, get_base1(alpha_prior, 1, "alpha_prior", 1), get_base1(alpha_prior, 2, "alpha_prior", 1), get_base1(alpha_prior, 3, "alpha_prior", 1)));
            current_statement_begin__ = 64;
            if (as_bool(dx)) {
                current_statement_begin__ = 65;
                lp_accum__.add(student_t_log<propto__>(beta, get_base1(beta_prior, 1, "beta_prior", 1), get_base1(beta_prior, 2, "beta_prior", 1), get_base1(beta_prior, 3, "beta_prior", 1)));
            }
            current_statement_begin__ = 67;
            if (as_bool(has_re)) {
                current_statement_begin__ = 68;
                lp_accum__.add(student_t_log<propto__>(get_base1(alpha_tau, has_re, "alpha_tau", 1), get_base1(alpha_tau_prior, 1, "alpha_tau_prior", 1), get_base1(alpha_tau_prior, 2, "alpha_tau_prior", 1), get_base1(alpha_tau_prior, 3, "alpha_tau_prior", 1)));
                current_statement_begin__ = 69;
                lp_accum__.add(std_normal_log<propto__>(alpha_re_tilde));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("intercept");
        names__.push_back("beta");
        names__.push_back("alpha_re_tilde");
        names__.push_back("alpha_tau");
        names__.push_back("v");
        names__.push_back("u");
        names__.push_back("sigma");
        names__.push_back("logit_rho");
        names__.push_back("rho");
        names__.push_back("convolved_re");
        names__.push_back("f");
        names__.push_back("yrep");
        names__.push_back("fitted");
        names__.push_back("residual");
        names__.push_back("log_lik");
        names__.push_back("alpha_re");
        names__.push_back("phi");
        names__.push_back("theta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ids);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_re);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ids);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bym2_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double intercept = in__.scalar_constrain();
        vars__.push_back(intercept);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(dx);
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re_tilde = in__.vector_constrain(n_ids);
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_re_tilde(j_1__));
        }
        std::vector<double> alpha_tau;
        size_t alpha_tau_d_0_max__ = has_re;
        alpha_tau.reserve(alpha_tau_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_tau_d_0_max__; ++d_0__) {
            alpha_tau.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_tau[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> v = in__.vector_constrain(n);
        size_t v_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < v_j_1_max__; ++j_1__) {
            vars__.push_back(v(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> u = in__.vector_constrain(n);
        size_t u_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
            vars__.push_back(u(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double logit_rho = in__.scalar_constrain();
        vars__.push_back(logit_rho);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 43;
            double rho;
            (void) rho;  // dummy to suppress unused var warning
            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("convolved_re", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> convolved_re(n);
            stan::math::initialize(convolved_re, DUMMY_VAR__);
            stan::math::fill(convolved_re, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("f", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> f(n);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 46;
            stan::math::assign(rho, inv_logit(logit_rho));
            current_statement_begin__ = 47;
            stan::math::assign(convolved_re, add(multiply(stan::math::sqrt((rho / scaling_factor)), v), multiply(stan::math::sqrt((1 - rho)), u)));
            current_statement_begin__ = 48;
            stan::math::assign(f, add(add(log_E, intercept), multiply(convolved_re, sigma)));
            current_statement_begin__ = 49;
            if (as_bool(dx)) {
                current_statement_begin__ = 49;
                stan::math::assign(f, add(f, multiply(x, beta)));
            }
            current_statement_begin__ = 50;
            if (as_bool(has_re)) {
                current_statement_begin__ = 51;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 52;
                    stan::model::assign(f, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(f, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "f") + (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, get_base1(id, i, "id", 1), "alpha_re_tilde", 1))), 
                                "assigning variable f");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            check_greater_or_equal(function__, "rho", rho, 0);
            check_less_or_equal(function__, "rho", rho, 1);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(rho);
                size_t convolved_re_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < convolved_re_j_1_max__; ++j_1__) {
                    vars__.push_back(convolved_re(j_1__));
                }
                size_t f_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    vars__.push_back(f(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 74;
            validate_non_negative_index("yrep", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> yrep(n);
            stan::math::initialize(yrep, DUMMY_VAR__);
            stan::math::fill(yrep, DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("fitted", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted(n);
            stan::math::initialize(fitted, DUMMY_VAR__);
            stan::math::fill(fitted, DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("residual", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> residual(n);
            stan::math::initialize(residual, DUMMY_VAR__);
            stan::math::fill(residual, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("alpha_re", "n_ids", n_ids);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re(n_ids);
            stan::math::initialize(alpha_re, DUMMY_VAR__);
            stan::math::fill(alpha_re, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("phi", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phi(n);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 80;
            validate_non_negative_index("theta", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(n);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 81;
            if (as_bool(has_re)) {
                current_statement_begin__ = 82;
                for (int i = 1; i <= n_ids; ++i) {
                    current_statement_begin__ = 83;
                    stan::model::assign(alpha_re, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, i, "alpha_re_tilde", 1)), 
                                "assigning variable alpha_re");
                }
            }
            current_statement_begin__ = 86;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 87;
                stan::model::assign(phi, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((sigma * stan::math::sqrt((rho / scaling_factor))) * get_base1(v, i, "v", 1)), 
                            "assigning variable phi");
                current_statement_begin__ = 88;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((sigma * stan::math::sqrt((1 - rho))) * get_base1(u, i, "u", 1)), 
                            "assigning variable theta");
                current_statement_begin__ = 89;
                stan::model::assign(fitted, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(f, i, "f", 1)), 
                            "assigning variable fitted");
                current_statement_begin__ = 90;
                stan::model::assign(residual, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(fitted, i, "fitted", 1) - get_base1(y, i, "y", 1)), 
                            "assigning variable residual");
                current_statement_begin__ = 91;
                stan::model::assign(yrep, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            poisson_log_rng(get_base1(f, i, "f", 1), base_rng__), 
                            "assigning variable yrep");
                current_statement_begin__ = 92;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            poisson_log_log(get_base1(y, i, "y", 1), get_base1(f, i, "f", 1)), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 74;
            size_t yrep_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
                vars__.push_back(yrep(j_1__));
            }
            current_statement_begin__ = 75;
            size_t fitted_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
                vars__.push_back(fitted(j_1__));
            }
            current_statement_begin__ = 76;
            size_t residual_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
                vars__.push_back(residual(j_1__));
            }
            current_statement_begin__ = 77;
            size_t log_lik_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 78;
            size_t alpha_re_j_1_max__ = n_ids;
            for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
                vars__.push_back(alpha_re(j_1__));
            }
            current_statement_begin__ = 79;
            size_t phi_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                vars__.push_back(phi(j_1__));
            }
            current_statement_begin__ = 80;
            size_t theta_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                vars__.push_back(theta(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_bym2";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < v_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t u_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "logit_rho";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho";
            param_names__.push_back(param_name_stream__.str());
            size_t convolved_re_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < convolved_re_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "convolved_re" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yrep_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yrep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t v_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < v_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t u_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "logit_rho";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho";
            param_names__.push_back(param_name_stream__.str());
            size_t convolved_re_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < convolved_re_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "convolved_re" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yrep_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yrep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_bym2_namespace::model_bym2 stan_model;
#endif
