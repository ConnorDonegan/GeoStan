// Generated by rstantools.  Do not edit by hand.

/*
    geostan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    geostan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with geostan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_car_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_car");
    reader.add_event(1, 1, "include", "parts/priors.stan");
    reader.add_event(1, 0, "start", "parts/priors.stan");
    reader.add_event(172, 171, "end", "parts/priors.stan");
    reader.add_event(172, 2, "restart", "model_car");
    reader.add_event(175, 5, "include", "parts/data.stan");
    reader.add_event(175, 0, "start", "parts/data.stan");
    reader.add_event(237, 62, "end", "parts/data.stan");
    reader.add_event(237, 6, "restart", "model_car");
    reader.add_event(250, 19, "include", "parts/trans_data.stan");
    reader.add_event(250, 0, "start", "parts/trans_data.stan");
    reader.add_event(295, 45, "end", "parts/trans_data.stan");
    reader.add_event(295, 20, "restart", "model_car");
    reader.add_event(304, 29, "include", "parts/params.stan");
    reader.add_event(304, 0, "start", "parts/params.stan");
    reader.add_event(341, 37, "end", "parts/params.stan");
    reader.add_event(341, 30, "restart", "model_car");
    reader.add_event(345, 34, "include", "parts/trans_params_declaration.stan");
    reader.add_event(345, 0, "start", "parts/trans_params_declaration.stan");
    reader.add_event(353, 8, "end", "parts/trans_params_declaration.stan");
    reader.add_event(353, 35, "restart", "model_car");
    reader.add_event(354, 36, "include", "parts/trans_params_expression.stan");
    reader.add_event(354, 0, "start", "parts/trans_params_expression.stan");
    reader.add_event(374, 20, "end", "parts/trans_params_expression.stan");
    reader.add_event(374, 37, "restart", "model_car");
    reader.add_event(377, 40, "include", "parts/model.stan");
    reader.add_event(377, 0, "start", "parts/model.stan");
    reader.add_event(470, 93, "end", "parts/model.stan");
    reader.add_event(470, 41, "restart", "model_car");
    reader.add_event(476, 47, "include", "parts/gen_quants_declaration.stan");
    reader.add_event(476, 0, "start", "parts/gen_quants_declaration.stan");
    reader.add_event(491, 15, "end", "parts/gen_quants_declaration.stan");
    reader.add_event(491, 48, "restart", "model_car");
    reader.add_event(492, 49, "include", "parts/gen_quants_expression_in_loop.stan");
    reader.add_event(492, 0, "start", "parts/gen_quants_expression_in_loop.stan");
    reader.add_event(524, 32, "end", "parts/gen_quants_expression_in_loop.stan");
    reader.add_event(524, 50, "restart", "model_car");
    reader.add_event(528, 52, "end", "model_car");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__>::type>::type>::type, Eigen::Dynamic, 1>
rhs_prior(const int& dev,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& z,
              const T2__& aux1_global,
              const T3__& aux2_global,
              const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& aux1_local,
              const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& aux2_local,
              const T6__& caux,
              const T7__& scale_global,
              const T8__& slab_scale,
              const T9__& error_scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 17;
        local_scalar_t__ tau(DUMMY_VAR__);
        (void) tau;  // dummy to suppress unused var warning
        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau, DUMMY_VAR__);
        stan::math::assign(tau,(((aux1_global * stan::math::sqrt(aux2_global)) * scale_global) * error_scale));
        current_statement_begin__ = 18;
        local_scalar_t__ c(DUMMY_VAR__);
        (void) c;  // dummy to suppress unused var warning
        stan::math::initialize(c, DUMMY_VAR__);
        stan::math::fill(c, DUMMY_VAR__);
        stan::math::assign(c,(slab_scale * stan::math::sqrt(caux)));
        current_statement_begin__ = 19;
        validate_non_negative_index("lambda", "dev", dev);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda(dev);
        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda, DUMMY_VAR__);
        stan::math::assign(lambda,elt_multiply(aux1_local, stan::math::sqrt(aux2_local)));
        current_statement_begin__ = 20;
        validate_non_negative_index("lambda_tilde", "dev", dev);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_tilde(dev);
        stan::math::initialize(lambda_tilde, DUMMY_VAR__);
        stan::math::fill(lambda_tilde, DUMMY_VAR__);
        stan::math::assign(lambda_tilde,stan::math::sqrt(elt_divide(multiply(pow(c, 2), square(lambda)), add(pow(c, 2), multiply(square(tau), square(lambda))))));
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(elt_multiply(z, lambda_tilde), tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rhs_prior_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__, typename boost::math::tools::promote_args<T9__>::type>::type>::type, Eigen::Dynamic, 1>
    operator()(const int& dev,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& z,
              const T2__& aux1_global,
              const T3__& aux2_global,
              const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& aux1_local,
              const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& aux2_local,
              const T6__& caux,
              const T7__& scale_global,
              const T8__& slab_scale,
              const T9__& error_scale, std::ostream* pstream__) const {
        return rhs_prior(dev, z, aux1_global, aux2_global, aux1_local, aux2_local, caux, scale_global, slab_scale, error_scale, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T7__, typename T8__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__, T8__>::type>::type
car_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
                    const T2__& tau,
                    const T3__& alpha,
                    const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& w,
                    const std::vector<int>& v,
                    const std::vector<int>& u,
                    const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& D_diag,
                    const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& lambda,
                    const int& n, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 48;
        validate_non_negative_index("yc", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> yc(n);
        stan::math::initialize(yc, DUMMY_VAR__);
        stan::math::fill(yc, DUMMY_VAR__);
        stan::math::assign(yc,subtract(y, mu));
        current_statement_begin__ = 49;
        validate_non_negative_index("yct_D", "n", n);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> yct_D(n);
        stan::math::initialize(yct_D, DUMMY_VAR__);
        stan::math::fill(yct_D, DUMMY_VAR__);
        current_statement_begin__ = 50;
        validate_non_negative_index("yct_W", "n", n);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> yct_W(n);
        stan::math::initialize(yct_W, DUMMY_VAR__);
        stan::math::fill(yct_W, DUMMY_VAR__);
        current_statement_begin__ = 51;
        validate_non_negative_index("ldet_terms", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ldet_terms(n);
        stan::math::initialize(ldet_terms, DUMMY_VAR__);
        stan::math::fill(ldet_terms, DUMMY_VAR__);
        current_statement_begin__ = 52;
        stan::math::assign(yct_D, transpose(elt_multiply(yc, D_diag)));
        current_statement_begin__ = 53;
        stan::math::assign(yct_W, transpose(csr_matrix_times_vector(n, n, w, v, u, yc)));
        current_statement_begin__ = 54;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 54;
            stan::model::assign(ldet_terms, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        log1m((alpha * get_base1(lambda, i, "lambda", 1))), 
                        "assigning variable ldet_terms");
        }
        current_statement_begin__ = 55;
        return stan::math::promote_scalar<fun_return_scalar_t__>((0.5 * (((n * stan::math::log(tau)) + sum(ldet_terms)) - (tau * (multiply(yct_D, yc) - (alpha * multiply(yct_W, yc)))))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T7__, typename T8__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__, T8__>::type>::type
car_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
                    const T2__& tau,
                    const T3__& alpha,
                    const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& w,
                    const std::vector<int>& v,
                    const std::vector<int>& u,
                    const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& D_diag,
                    const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& lambda,
                    const int& n, std::ostream* pstream__) {
    return car_normal_lpdf<false>(y,mu,tau,alpha,w,v,u,D_diag,lambda,n, pstream__);
}
struct car_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T7__, typename T8__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__, T8__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
                    const T2__& tau,
                    const T3__& alpha,
                    const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& w,
                    const std::vector<int>& v,
                    const std::vector<int>& u,
                    const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& D_diag,
                    const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& lambda,
                    const int& n, std::ostream* pstream__) const {
        return car_normal_lpdf(y, mu, tau, alpha, w, v, u, D_diag, lambda, n, pstream__);
    }
};
template <bool propto, typename T0__>
typename boost::math::tools::promote_args<T0__>::type
icar_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2,
                     const int& k,
                     const std::vector<int>& group_size,
                     const std::vector<int>& group_idx,
                     const int& has_theta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 79;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        current_statement_begin__ = 80;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 81;
        stan::math::assign(lp, (-(0.5) * dot_self(subtract(stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(node1), stan::model::nil_index_list()), "phi"), stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(node2), stan::model::nil_index_list()), "phi")))));
        current_statement_begin__ = 82;
        if (as_bool(has_theta)) {
            current_statement_begin__ = 83;
            for (int j = 1; j <= k; ++j) {
                current_statement_begin__ = 85;
                stan::math::assign(lp, (lp + normal_log(sum(stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "phi")), 0, (0.001 * get_base1(group_size, j, "group_size", 1)))));
                current_statement_begin__ = 86;
                stan::math::assign(pos, (pos + get_base1(group_size, j, "group_size", 1)));
            }
        } else {
            current_statement_begin__ = 90;
            for (int j = 1; j <= k; ++j) {
                current_statement_begin__ = 91;
                if (as_bool(logical_gt(get_base1(group_size, j, "group_size", 1), 1))) {
                    current_statement_begin__ = 93;
                    stan::math::assign(lp, (lp + normal_log(sum(stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "phi")), 0, (0.001 * get_base1(group_size, j, "group_size", 1)))));
                } else {
                    current_statement_begin__ = 96;
                    stan::math::assign(lp, (lp + std_normal_log(stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "phi"))));
                }
                current_statement_begin__ = 98;
                stan::math::assign(pos, (pos + get_base1(group_size, j, "group_size", 1)));
            }
        }
        current_statement_begin__ = 101;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
icar_normal_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2,
                     const int& k,
                     const std::vector<int>& group_size,
                     const std::vector<int>& group_idx,
                     const int& has_theta, std::ostream* pstream__) {
    return icar_normal_lpdf<false>(phi,node1,node2,k,group_size,group_idx,has_theta, pstream__);
}
struct icar_normal_lpdf_functor__ {
    template <bool propto, typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                     const std::vector<int>& node1,
                     const std::vector<int>& node2,
                     const int& k,
                     const std::vector<int>& group_size,
                     const std::vector<int>& group_idx,
                     const int& has_theta, std::ostream* pstream__) const {
        return icar_normal_lpdf(phi, node1, node2, k, group_size, group_idx, has_theta, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
convolve_bym(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
                 const int& n,
                 const int& k,
                 const std::vector<int>& group_size,
                 const std::vector<int>& group_idx, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 121;
        validate_non_negative_index("convolution", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> convolution(n);
        stan::math::initialize(convolution, DUMMY_VAR__);
        stan::math::fill(convolution, DUMMY_VAR__);
        current_statement_begin__ = 122;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 123;
        for (int j = 1; j <= k; ++j) {
            current_statement_begin__ = 124;
            if (as_bool(logical_eq(get_base1(group_size, j, "group_size", 1), 1))) {
                current_statement_begin__ = 125;
                stan::model::assign(convolution, 
                            stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), 
                            stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "theta"), 
                            "assigning variable convolution");
            } else {
                current_statement_begin__ = 127;
                stan::model::assign(convolution, 
                            stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), 
                            add(stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "phi"), stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "theta")), 
                            "assigning variable convolution");
            }
            current_statement_begin__ = 130;
            stan::math::assign(pos, (pos + get_base1(group_size, j, "group_size", 1)));
        }
        current_statement_begin__ = 132;
        return stan::math::promote_scalar<fun_return_scalar_t__>(convolution);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct convolve_bym_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
                 const int& n,
                 const int& k,
                 const std::vector<int>& group_size,
                 const std::vector<int>& group_idx, std::ostream* pstream__) const {
        return convolve_bym(phi, theta, n, k, group_size, group_idx, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T7__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type, Eigen::Dynamic, 1>
convolve_bym2(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi_tilde,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta_tilde,
                  const T2__& spatial_scale,
                  const int& n,
                  const int& k,
                  const std::vector<int>& group_size,
                  const std::vector<int>& group_idx,
                  const T7__& rho,
                  const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& scale_factor, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 157;
        validate_non_negative_index("convolution", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> convolution(n);
        stan::math::initialize(convolution, DUMMY_VAR__);
        stan::math::fill(convolution, DUMMY_VAR__);
        current_statement_begin__ = 158;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 159;
        for (int j = 1; j <= k; ++j) {
            current_statement_begin__ = 160;
            if (as_bool(logical_eq(get_base1(group_size, j, "group_size", 1), 1))) {
                current_statement_begin__ = 161;
                stan::model::assign(convolution, 
                            stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), 
                            multiply(spatial_scale, stan::model::rvalue(theta_tilde, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "theta_tilde")), 
                            "assigning variable convolution");
            } else {
                current_statement_begin__ = 163;
                stan::model::assign(convolution, 
                            stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), 
                            multiply(spatial_scale, add(multiply(stan::math::sqrt((rho / get_base1(scale_factor, j, "scale_factor", 1))), stan::model::rvalue(phi_tilde, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "phi_tilde")), multiply(stan::math::sqrt((1 - rho)), stan::model::rvalue(theta_tilde, stan::model::cons_list(stan::model::index_multi(segment(group_idx, pos, get_base1(group_size, j, "group_size", 1))), stan::model::nil_index_list()), "theta_tilde")))), 
                            "assigning variable convolution");
            }
            current_statement_begin__ = 168;
            stan::math::assign(pos, (pos + get_base1(group_size, j, "group_size", 1)));
        }
        current_statement_begin__ = 170;
        return stan::math::promote_scalar<fun_return_scalar_t__>(convolution);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct convolve_bym2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T7__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi_tilde,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta_tilde,
                  const T2__& spatial_scale,
                  const int& n,
                  const int& k,
                  const std::vector<int>& group_size,
                  const std::vector<int>& group_idx,
                  const T7__& rho,
                  const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& scale_factor, std::ostream* pstream__) const {
        return convolve_bym2(phi_tilde, theta_tilde, spatial_scale, n, k, group_size, group_idx, rho, scale_factor, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_car
  : public stan::model::model_base_crtp<model_car> {
private:
        int family;
        int n;
        vector_d offset;
        int dwx;
        std::vector<int> wx_idx;
        int dw_nonzero;
        matrix_d W;
        vector_d bounds;
        int dx_obs;
        int dx_me_bounded;
        int dx_me_unbounded;
        std::vector<int> x_obs_idx;
        std::vector<int> x_me_unbounded_idx;
        std::vector<int> x_me_bounded_idx;
        matrix_d x_obs;
        std::vector<vector_d> x_me_unbounded;
        std::vector<vector_d> x_me_bounded;
        std::vector<vector_d> sigma_me_unbounded;
        std::vector<vector_d> sigma_me_bounded;
        int dev;
        matrix_d EV;
        int spatial_me;
        vector_d slab_df_me_unbounded;
        vector_d slab_scale_me_unbounded;
        vector_d scale_global_me_unbounded;
        vector_d slab_df_me_bounded;
        vector_d slab_scale_me_bounded;
        vector_d scale_global_me_bounded;
        int has_re;
        int n_ids;
        std::vector<int> id;
        vector_d alpha_prior;
        int dbeta_prior;
        std::vector<row_vector_d> beta_prior;
        vector_d alpha_tau_prior;
        vector_d t_nu_prior;
        vector_d sigma_prior;
        vector_d y;
        std::vector<int> y_int;
        std::vector<int> trials;
        int prior_only;
        matrix_d C;
        int dc_nonzero;
        vector_d D_diag;
        vector_d mean_zero;
        vector_d lambda;
        vector_d invsqrtD;
        vector_d car_w;
        std::vector<int> car_v;
        std::vector<int> car_u;
        int is_gaussian;
        int is_student;
        int is_poisson;
        int is_binomial;
        int has_me;
        int has_sigma;
        int has_offset;
        int dx_all;
        vector_d prior_scale_x_true_unbounded;
        vector_d prior_mean_x_true_unbounded;
        vector_d prior_scale_x_true_bounded;
        vector_d prior_mean_x_true_bounded;
        vector_d w;
        std::vector<int> v;
        std::vector<int> u;
        matrix_d WX;
public:
    model_car(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_car(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_car_namespace::model_car";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 177;
            context__.validate_dims("data initialization", "family", "int", context__.to_vec());
            family = int(0);
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            family = vals_i__[pos__++];
            check_greater_or_equal(function__, "family", family, 0);
            check_less_or_equal(function__, "family", family, 4);
            current_statement_begin__ = 179;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 182;
            validate_non_negative_index("offset", "n", n);
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec(n));
            offset = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < offset_j_1_max__; ++j_1__) {
                offset(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 185;
            context__.validate_dims("data initialization", "dwx", "int", context__.to_vec());
            dwx = int(0);
            vals_i__ = context__.vals_i("dwx");
            pos__ = 0;
            dwx = vals_i__[pos__++];
            check_greater_or_equal(function__, "dwx", dwx, 0);
            current_statement_begin__ = 186;
            validate_non_negative_index("wx_idx", "(dwx ? dwx : 1 )", (dwx ? dwx : 1 ));
            context__.validate_dims("data initialization", "wx_idx", "int", context__.to_vec((dwx ? dwx : 1 )));
            wx_idx = std::vector<int>((dwx ? dwx : 1 ), int(0));
            vals_i__ = context__.vals_i("wx_idx");
            pos__ = 0;
            size_t wx_idx_k_0_max__ = (dwx ? dwx : 1 );
            for (size_t k_0__ = 0; k_0__ < wx_idx_k_0_max__; ++k_0__) {
                wx_idx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 187;
            context__.validate_dims("data initialization", "dw_nonzero", "int", context__.to_vec());
            dw_nonzero = int(0);
            vals_i__ = context__.vals_i("dw_nonzero");
            pos__ = 0;
            dw_nonzero = vals_i__[pos__++];
            check_greater_or_equal(function__, "dw_nonzero", dw_nonzero, 0);
            current_statement_begin__ = 188;
            validate_non_negative_index("W", "(dwx ? n : 1 )", (dwx ? n : 1 ));
            validate_non_negative_index("W", "(dwx ? n : 1 )", (dwx ? n : 1 ));
            context__.validate_dims("data initialization", "W", "matrix_d", context__.to_vec((dwx ? n : 1 ),(dwx ? n : 1 )));
            W = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((dwx ? n : 1 ), (dwx ? n : 1 ));
            vals_r__ = context__.vals_r("W");
            pos__ = 0;
            size_t W_j_2_max__ = (dwx ? n : 1 );
            size_t W_j_1_max__ = (dwx ? n : 1 );
            for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                    W(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 192;
            validate_non_negative_index("bounds", "2", 2);
            context__.validate_dims("data initialization", "bounds", "vector_d", context__.to_vec(2));
            bounds = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("bounds");
            pos__ = 0;
            size_t bounds_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < bounds_j_1_max__; ++j_1__) {
                bounds(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 194;
            context__.validate_dims("data initialization", "dx_obs", "int", context__.to_vec());
            dx_obs = int(0);
            vals_i__ = context__.vals_i("dx_obs");
            pos__ = 0;
            dx_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "dx_obs", dx_obs, 0);
            current_statement_begin__ = 195;
            context__.validate_dims("data initialization", "dx_me_bounded", "int", context__.to_vec());
            dx_me_bounded = int(0);
            vals_i__ = context__.vals_i("dx_me_bounded");
            pos__ = 0;
            dx_me_bounded = vals_i__[pos__++];
            check_greater_or_equal(function__, "dx_me_bounded", dx_me_bounded, 0);
            current_statement_begin__ = 196;
            context__.validate_dims("data initialization", "dx_me_unbounded", "int", context__.to_vec());
            dx_me_unbounded = int(0);
            vals_i__ = context__.vals_i("dx_me_unbounded");
            pos__ = 0;
            dx_me_unbounded = vals_i__[pos__++];
            check_greater_or_equal(function__, "dx_me_unbounded", dx_me_unbounded, 0);
            current_statement_begin__ = 198;
            validate_non_negative_index("x_obs_idx", "(dx_obs ? dx_obs : 1 )", (dx_obs ? dx_obs : 1 ));
            context__.validate_dims("data initialization", "x_obs_idx", "int", context__.to_vec((dx_obs ? dx_obs : 1 )));
            x_obs_idx = std::vector<int>((dx_obs ? dx_obs : 1 ), int(0));
            vals_i__ = context__.vals_i("x_obs_idx");
            pos__ = 0;
            size_t x_obs_idx_k_0_max__ = (dx_obs ? dx_obs : 1 );
            for (size_t k_0__ = 0; k_0__ < x_obs_idx_k_0_max__; ++k_0__) {
                x_obs_idx[k_0__] = vals_i__[pos__++];
            }
            size_t x_obs_idx_i_0_max__ = (dx_obs ? dx_obs : 1 );
            for (size_t i_0__ = 0; i_0__ < x_obs_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "x_obs_idx[i_0__]", x_obs_idx[i_0__], 0);
            }
            current_statement_begin__ = 199;
            validate_non_negative_index("x_me_unbounded_idx", "(dx_me_unbounded ? dx_me_unbounded : 1 )", (dx_me_unbounded ? dx_me_unbounded : 1 ));
            context__.validate_dims("data initialization", "x_me_unbounded_idx", "int", context__.to_vec((dx_me_unbounded ? dx_me_unbounded : 1 )));
            x_me_unbounded_idx = std::vector<int>((dx_me_unbounded ? dx_me_unbounded : 1 ), int(0));
            vals_i__ = context__.vals_i("x_me_unbounded_idx");
            pos__ = 0;
            size_t x_me_unbounded_idx_k_0_max__ = (dx_me_unbounded ? dx_me_unbounded : 1 );
            for (size_t k_0__ = 0; k_0__ < x_me_unbounded_idx_k_0_max__; ++k_0__) {
                x_me_unbounded_idx[k_0__] = vals_i__[pos__++];
            }
            size_t x_me_unbounded_idx_i_0_max__ = (dx_me_unbounded ? dx_me_unbounded : 1 );
            for (size_t i_0__ = 0; i_0__ < x_me_unbounded_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "x_me_unbounded_idx[i_0__]", x_me_unbounded_idx[i_0__], 0);
            }
            current_statement_begin__ = 200;
            validate_non_negative_index("x_me_bounded_idx", "(dx_me_bounded ? dx_me_bounded : 1 )", (dx_me_bounded ? dx_me_bounded : 1 ));
            context__.validate_dims("data initialization", "x_me_bounded_idx", "int", context__.to_vec((dx_me_bounded ? dx_me_bounded : 1 )));
            x_me_bounded_idx = std::vector<int>((dx_me_bounded ? dx_me_bounded : 1 ), int(0));
            vals_i__ = context__.vals_i("x_me_bounded_idx");
            pos__ = 0;
            size_t x_me_bounded_idx_k_0_max__ = (dx_me_bounded ? dx_me_bounded : 1 );
            for (size_t k_0__ = 0; k_0__ < x_me_bounded_idx_k_0_max__; ++k_0__) {
                x_me_bounded_idx[k_0__] = vals_i__[pos__++];
            }
            size_t x_me_bounded_idx_i_0_max__ = (dx_me_bounded ? dx_me_bounded : 1 );
            for (size_t i_0__ = 0; i_0__ < x_me_bounded_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "x_me_bounded_idx[i_0__]", x_me_bounded_idx[i_0__], 0);
            }
            current_statement_begin__ = 202;
            validate_non_negative_index("x_obs", "n", n);
            validate_non_negative_index("x_obs", "(dx_obs ? dx_obs : 0 )", (dx_obs ? dx_obs : 0 ));
            context__.validate_dims("data initialization", "x_obs", "matrix_d", context__.to_vec(n,(dx_obs ? dx_obs : 0 )));
            x_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, (dx_obs ? dx_obs : 0 ));
            vals_r__ = context__.vals_r("x_obs");
            pos__ = 0;
            size_t x_obs_j_2_max__ = (dx_obs ? dx_obs : 0 );
            size_t x_obs_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_obs_j_1_max__; ++j_1__) {
                    x_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 203;
            validate_non_negative_index("x_me_unbounded", "n", n);
            validate_non_negative_index("x_me_unbounded", "dx_me_unbounded", dx_me_unbounded);
            context__.validate_dims("data initialization", "x_me_unbounded", "vector_d", context__.to_vec(dx_me_unbounded,n));
            x_me_unbounded = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(dx_me_unbounded, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
            vals_r__ = context__.vals_r("x_me_unbounded");
            pos__ = 0;
            size_t x_me_unbounded_j_1_max__ = n;
            size_t x_me_unbounded_k_0_max__ = dx_me_unbounded;
            for (size_t j_1__ = 0; j_1__ < x_me_unbounded_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_me_unbounded_k_0_max__; ++k_0__) {
                    x_me_unbounded[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 204;
            validate_non_negative_index("x_me_bounded", "n", n);
            validate_non_negative_index("x_me_bounded", "dx_me_bounded", dx_me_bounded);
            context__.validate_dims("data initialization", "x_me_bounded", "vector_d", context__.to_vec(dx_me_bounded,n));
            x_me_bounded = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(dx_me_bounded, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
            vals_r__ = context__.vals_r("x_me_bounded");
            pos__ = 0;
            size_t x_me_bounded_j_1_max__ = n;
            size_t x_me_bounded_k_0_max__ = dx_me_bounded;
            for (size_t j_1__ = 0; j_1__ < x_me_bounded_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_me_bounded_k_0_max__; ++k_0__) {
                    x_me_bounded[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            size_t x_me_bounded_i_0_max__ = dx_me_bounded;
            for (size_t i_0__ = 0; i_0__ < x_me_bounded_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "x_me_bounded[i_0__]", x_me_bounded[i_0__], get_base1(bounds, 1, "bounds", 1));
                check_less_or_equal(function__, "x_me_bounded[i_0__]", x_me_bounded[i_0__], get_base1(bounds, 2, "bounds", 1));
            }
            current_statement_begin__ = 206;
            validate_non_negative_index("sigma_me_unbounded", "n", n);
            validate_non_negative_index("sigma_me_unbounded", "dx_me_unbounded", dx_me_unbounded);
            context__.validate_dims("data initialization", "sigma_me_unbounded", "vector_d", context__.to_vec(dx_me_unbounded,n));
            sigma_me_unbounded = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(dx_me_unbounded, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
            vals_r__ = context__.vals_r("sigma_me_unbounded");
            pos__ = 0;
            size_t sigma_me_unbounded_j_1_max__ = n;
            size_t sigma_me_unbounded_k_0_max__ = dx_me_unbounded;
            for (size_t j_1__ = 0; j_1__ < sigma_me_unbounded_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_me_unbounded_k_0_max__; ++k_0__) {
                    sigma_me_unbounded[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            size_t sigma_me_unbounded_i_0_max__ = dx_me_unbounded;
            for (size_t i_0__ = 0; i_0__ < sigma_me_unbounded_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_me_unbounded[i_0__]", sigma_me_unbounded[i_0__], 0);
            }
            current_statement_begin__ = 207;
            validate_non_negative_index("sigma_me_bounded", "n", n);
            validate_non_negative_index("sigma_me_bounded", "dx_me_bounded", dx_me_bounded);
            context__.validate_dims("data initialization", "sigma_me_bounded", "vector_d", context__.to_vec(dx_me_bounded,n));
            sigma_me_bounded = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(dx_me_bounded, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
            vals_r__ = context__.vals_r("sigma_me_bounded");
            pos__ = 0;
            size_t sigma_me_bounded_j_1_max__ = n;
            size_t sigma_me_bounded_k_0_max__ = dx_me_bounded;
            for (size_t j_1__ = 0; j_1__ < sigma_me_bounded_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_me_bounded_k_0_max__; ++k_0__) {
                    sigma_me_bounded[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            size_t sigma_me_bounded_i_0_max__ = dx_me_bounded;
            for (size_t i_0__ = 0; i_0__ < sigma_me_bounded_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_me_bounded[i_0__]", sigma_me_bounded[i_0__], 0);
            }
            current_statement_begin__ = 209;
            context__.validate_dims("data initialization", "dev", "int", context__.to_vec());
            dev = int(0);
            vals_i__ = context__.vals_i("dev");
            pos__ = 0;
            dev = vals_i__[pos__++];
            check_greater_or_equal(function__, "dev", dev, 1);
            current_statement_begin__ = 210;
            validate_non_negative_index("EV", "n", n);
            validate_non_negative_index("EV", "dev", dev);
            context__.validate_dims("data initialization", "EV", "matrix_d", context__.to_vec(n,dev));
            EV = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, dev);
            vals_r__ = context__.vals_r("EV");
            pos__ = 0;
            size_t EV_j_2_max__ = dev;
            size_t EV_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < EV_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < EV_j_1_max__; ++j_1__) {
                    EV(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 211;
            context__.validate_dims("data initialization", "spatial_me", "int", context__.to_vec());
            spatial_me = int(0);
            vals_i__ = context__.vals_i("spatial_me");
            pos__ = 0;
            spatial_me = vals_i__[pos__++];
            check_greater_or_equal(function__, "spatial_me", spatial_me, 0);
            check_less_or_equal(function__, "spatial_me", spatial_me, 1);
            current_statement_begin__ = 213;
            validate_non_negative_index("slab_df_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            context__.validate_dims("data initialization", "slab_df_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 )));
            slab_df_me_unbounded = Eigen::Matrix<double, Eigen::Dynamic, 1>((spatial_me ? dx_me_unbounded : 0 ));
            vals_r__ = context__.vals_r("slab_df_me_unbounded");
            pos__ = 0;
            size_t slab_df_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
            for (size_t j_1__ = 0; j_1__ < slab_df_me_unbounded_j_1_max__; ++j_1__) {
                slab_df_me_unbounded(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "slab_df_me_unbounded", slab_df_me_unbounded, 0);
            current_statement_begin__ = 214;
            validate_non_negative_index("slab_scale_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            context__.validate_dims("data initialization", "slab_scale_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 )));
            slab_scale_me_unbounded = Eigen::Matrix<double, Eigen::Dynamic, 1>((spatial_me ? dx_me_unbounded : 0 ));
            vals_r__ = context__.vals_r("slab_scale_me_unbounded");
            pos__ = 0;
            size_t slab_scale_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
            for (size_t j_1__ = 0; j_1__ < slab_scale_me_unbounded_j_1_max__; ++j_1__) {
                slab_scale_me_unbounded(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "slab_scale_me_unbounded", slab_scale_me_unbounded, 0);
            current_statement_begin__ = 215;
            validate_non_negative_index("scale_global_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            context__.validate_dims("data initialization", "scale_global_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 )));
            scale_global_me_unbounded = Eigen::Matrix<double, Eigen::Dynamic, 1>((spatial_me ? dx_me_unbounded : 0 ));
            vals_r__ = context__.vals_r("scale_global_me_unbounded");
            pos__ = 0;
            size_t scale_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
            for (size_t j_1__ = 0; j_1__ < scale_global_me_unbounded_j_1_max__; ++j_1__) {
                scale_global_me_unbounded(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "scale_global_me_unbounded", scale_global_me_unbounded, 0);
            current_statement_begin__ = 217;
            validate_non_negative_index("slab_df_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            context__.validate_dims("data initialization", "slab_df_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 )));
            slab_df_me_bounded = Eigen::Matrix<double, Eigen::Dynamic, 1>((spatial_me ? dx_me_bounded : 0 ));
            vals_r__ = context__.vals_r("slab_df_me_bounded");
            pos__ = 0;
            size_t slab_df_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
            for (size_t j_1__ = 0; j_1__ < slab_df_me_bounded_j_1_max__; ++j_1__) {
                slab_df_me_bounded(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "slab_df_me_bounded", slab_df_me_bounded, 0);
            current_statement_begin__ = 218;
            validate_non_negative_index("slab_scale_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            context__.validate_dims("data initialization", "slab_scale_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 )));
            slab_scale_me_bounded = Eigen::Matrix<double, Eigen::Dynamic, 1>((spatial_me ? dx_me_bounded : 0 ));
            vals_r__ = context__.vals_r("slab_scale_me_bounded");
            pos__ = 0;
            size_t slab_scale_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
            for (size_t j_1__ = 0; j_1__ < slab_scale_me_bounded_j_1_max__; ++j_1__) {
                slab_scale_me_bounded(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "slab_scale_me_bounded", slab_scale_me_bounded, 0);
            current_statement_begin__ = 219;
            validate_non_negative_index("scale_global_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            context__.validate_dims("data initialization", "scale_global_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 )));
            scale_global_me_bounded = Eigen::Matrix<double, Eigen::Dynamic, 1>((spatial_me ? dx_me_bounded : 0 ));
            vals_r__ = context__.vals_r("scale_global_me_bounded");
            pos__ = 0;
            size_t scale_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
            for (size_t j_1__ = 0; j_1__ < scale_global_me_bounded_j_1_max__; ++j_1__) {
                scale_global_me_bounded(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "scale_global_me_bounded", scale_global_me_bounded, 0);
            current_statement_begin__ = 222;
            context__.validate_dims("data initialization", "has_re", "int", context__.to_vec());
            has_re = int(0);
            vals_i__ = context__.vals_i("has_re");
            pos__ = 0;
            has_re = vals_i__[pos__++];
            check_greater_or_equal(function__, "has_re", has_re, 0);
            check_less_or_equal(function__, "has_re", has_re, 1);
            current_statement_begin__ = 223;
            context__.validate_dims("data initialization", "n_ids", "int", context__.to_vec());
            n_ids = int(0);
            vals_i__ = context__.vals_i("n_ids");
            pos__ = 0;
            n_ids = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_ids", n_ids, 0);
            current_statement_begin__ = 224;
            validate_non_negative_index("id", "n", n);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(n));
            id = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            size_t id_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "id[i_0__]", id[i_0__], 0);
                check_less_or_equal(function__, "id[i_0__]", id[i_0__], n_ids);
            }
            current_statement_begin__ = 226;
            validate_non_negative_index("alpha_prior", "2", 2);
            context__.validate_dims("data initialization", "alpha_prior", "vector_d", context__.to_vec(2));
            alpha_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("alpha_prior");
            pos__ = 0;
            size_t alpha_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < alpha_prior_j_1_max__; ++j_1__) {
                alpha_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 227;
            context__.validate_dims("data initialization", "dbeta_prior", "int", context__.to_vec());
            dbeta_prior = int(0);
            vals_i__ = context__.vals_i("dbeta_prior");
            pos__ = 0;
            dbeta_prior = vals_i__[pos__++];
            check_greater_or_equal(function__, "dbeta_prior", dbeta_prior, 0);
            current_statement_begin__ = 228;
            validate_non_negative_index("beta_prior", "dbeta_prior", dbeta_prior);
            validate_non_negative_index("beta_prior", "2", 2);
            context__.validate_dims("data initialization", "beta_prior", "row_vector_d", context__.to_vec(2,dbeta_prior));
            beta_prior = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(2, Eigen::Matrix<double, 1, Eigen::Dynamic>(dbeta_prior));
            vals_r__ = context__.vals_r("beta_prior");
            pos__ = 0;
            size_t beta_prior_j_1_max__ = dbeta_prior;
            size_t beta_prior_k_0_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < beta_prior_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_prior_k_0_max__; ++k_0__) {
                    beta_prior[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 229;
            validate_non_negative_index("alpha_tau_prior", "3", 3);
            context__.validate_dims("data initialization", "alpha_tau_prior", "vector_d", context__.to_vec(3));
            alpha_tau_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("alpha_tau_prior");
            pos__ = 0;
            size_t alpha_tau_prior_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < alpha_tau_prior_j_1_max__; ++j_1__) {
                alpha_tau_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 230;
            validate_non_negative_index("t_nu_prior", "2", 2);
            context__.validate_dims("data initialization", "t_nu_prior", "vector_d", context__.to_vec(2));
            t_nu_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("t_nu_prior");
            pos__ = 0;
            size_t t_nu_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < t_nu_prior_j_1_max__; ++j_1__) {
                t_nu_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 231;
            validate_non_negative_index("sigma_prior", "3", 3);
            context__.validate_dims("data initialization", "sigma_prior", "vector_d", context__.to_vec(3));
            sigma_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("sigma_prior");
            pos__ = 0;
            size_t sigma_prior_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < sigma_prior_j_1_max__; ++j_1__) {
                sigma_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 233;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 234;
            validate_non_negative_index("y_int", "n", n);
            context__.validate_dims("data initialization", "y_int", "int", context__.to_vec(n));
            y_int = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("y_int");
            pos__ = 0;
            size_t y_int_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < y_int_k_0_max__; ++k_0__) {
                y_int[k_0__] = vals_i__[pos__++];
            }
            size_t y_int_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < y_int_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_int[i_0__]", y_int[i_0__], 0);
            }
            current_statement_begin__ = 235;
            validate_non_negative_index("trials", "n", n);
            context__.validate_dims("data initialization", "trials", "int", context__.to_vec(n));
            trials = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("trials");
            pos__ = 0;
            size_t trials_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < trials_k_0_max__; ++k_0__) {
                trials[k_0__] = vals_i__[pos__++];
            }
            size_t trials_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < trials_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "trials[i_0__]", trials[i_0__], 0);
            }
            current_statement_begin__ = 236;
            context__.validate_dims("data initialization", "prior_only", "int", context__.to_vec());
            prior_only = int(0);
            vals_i__ = context__.vals_i("prior_only");
            pos__ = 0;
            prior_only = vals_i__[pos__++];
            check_greater_or_equal(function__, "prior_only", prior_only, 0);
            check_less_or_equal(function__, "prior_only", prior_only, 1);
            current_statement_begin__ = 239;
            validate_non_negative_index("C", "n", n);
            validate_non_negative_index("C", "n", n);
            context__.validate_dims("data initialization", "C", "matrix_d", context__.to_vec(n,n));
            C = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, n);
            vals_r__ = context__.vals_r("C");
            pos__ = 0;
            size_t C_j_2_max__ = n;
            size_t C_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < C_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < C_j_1_max__; ++j_1__) {
                    C(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "C", C, 0);
            check_less_or_equal(function__, "C", C, 1);
            current_statement_begin__ = 240;
            context__.validate_dims("data initialization", "dc_nonzero", "int", context__.to_vec());
            dc_nonzero = int(0);
            vals_i__ = context__.vals_i("dc_nonzero");
            pos__ = 0;
            dc_nonzero = vals_i__[pos__++];
            check_greater_or_equal(function__, "dc_nonzero", dc_nonzero, 1);
            current_statement_begin__ = 241;
            validate_non_negative_index("D_diag", "n", n);
            context__.validate_dims("data initialization", "D_diag", "vector_d", context__.to_vec(n));
            D_diag = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("D_diag");
            pos__ = 0;
            size_t D_diag_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < D_diag_j_1_max__; ++j_1__) {
                D_diag(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 245;
            validate_non_negative_index("mean_zero", "n", n);
            mean_zero = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            stan::math::fill(mean_zero, DUMMY_VAR__);
            stan::math::assign(mean_zero,rep_vector(0, n));
            current_statement_begin__ = 246;
            validate_non_negative_index("lambda", "n", n);
            lambda = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 247;
            validate_non_negative_index("invsqrtD", "n", n);
            invsqrtD = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            stan::math::fill(invsqrtD, DUMMY_VAR__);
            current_statement_begin__ = 248;
            validate_non_negative_index("car_w", "dc_nonzero", dc_nonzero);
            car_w = Eigen::Matrix<double, Eigen::Dynamic, 1>(dc_nonzero);
            stan::math::fill(car_w, DUMMY_VAR__);
            stan::math::assign(car_w,csr_extract_w(transpose(C)));
            current_statement_begin__ = 249;
            validate_non_negative_index("car_v", "dc_nonzero", dc_nonzero);
            car_v = std::vector<int>(dc_nonzero, int(0));
            stan::math::fill(car_v, std::numeric_limits<int>::min());
            stan::math::assign(car_v,csr_extract_v(transpose(C)));
            current_statement_begin__ = 250;
            validate_non_negative_index("car_u", "(n + 1)", (n + 1));
            car_u = std::vector<int>((n + 1), int(0));
            stan::math::fill(car_u, std::numeric_limits<int>::min());
            stan::math::assign(car_u,csr_extract_u(transpose(C)));
            current_statement_begin__ = 251;
            is_gaussian = int(0);
            stan::math::fill(is_gaussian, std::numeric_limits<int>::min());
            current_statement_begin__ = 252;
            is_student = int(0);
            stan::math::fill(is_student, std::numeric_limits<int>::min());
            current_statement_begin__ = 253;
            is_poisson = int(0);
            stan::math::fill(is_poisson, std::numeric_limits<int>::min());
            current_statement_begin__ = 254;
            is_binomial = int(0);
            stan::math::fill(is_binomial, std::numeric_limits<int>::min());
            current_statement_begin__ = 255;
            has_me = int(0);
            stan::math::fill(has_me, std::numeric_limits<int>::min());
            current_statement_begin__ = 256;
            has_sigma = int(0);
            stan::math::fill(has_sigma, std::numeric_limits<int>::min());
            current_statement_begin__ = 257;
            has_offset = int(0);
            stan::math::fill(has_offset, std::numeric_limits<int>::min());
            current_statement_begin__ = 258;
            dx_all = int(0);
            stan::math::fill(dx_all, std::numeric_limits<int>::min());
            current_statement_begin__ = 259;
            validate_non_negative_index("prior_scale_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
            prior_scale_x_true_unbounded = Eigen::Matrix<double, Eigen::Dynamic, 1>(dx_me_unbounded);
            stan::math::fill(prior_scale_x_true_unbounded, DUMMY_VAR__);
            current_statement_begin__ = 260;
            validate_non_negative_index("prior_mean_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
            prior_mean_x_true_unbounded = Eigen::Matrix<double, Eigen::Dynamic, 1>(dx_me_unbounded);
            stan::math::fill(prior_mean_x_true_unbounded, DUMMY_VAR__);
            current_statement_begin__ = 261;
            validate_non_negative_index("prior_scale_x_true_bounded", "dx_me_bounded", dx_me_bounded);
            prior_scale_x_true_bounded = Eigen::Matrix<double, Eigen::Dynamic, 1>(dx_me_bounded);
            stan::math::fill(prior_scale_x_true_bounded, DUMMY_VAR__);
            current_statement_begin__ = 262;
            validate_non_negative_index("prior_mean_x_true_bounded", "dx_me_bounded", dx_me_bounded);
            prior_mean_x_true_bounded = Eigen::Matrix<double, Eigen::Dynamic, 1>(dx_me_bounded);
            stan::math::fill(prior_mean_x_true_bounded, DUMMY_VAR__);
            current_statement_begin__ = 263;
            validate_non_negative_index("w", "dw_nonzero", dw_nonzero);
            w = Eigen::Matrix<double, Eigen::Dynamic, 1>(dw_nonzero);
            stan::math::fill(w, DUMMY_VAR__);
            current_statement_begin__ = 264;
            validate_non_negative_index("v", "dw_nonzero", dw_nonzero);
            v = std::vector<int>(dw_nonzero, int(0));
            stan::math::fill(v, std::numeric_limits<int>::min());
            current_statement_begin__ = 265;
            validate_non_negative_index("u", "(n + 1)", (n + 1));
            u = std::vector<int>((n + 1), int(0));
            stan::math::fill(u, std::numeric_limits<int>::min());
            current_statement_begin__ = 266;
            validate_non_negative_index("WX", "n", n);
            validate_non_negative_index("WX", "dwx", dwx);
            WX = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, dwx);
            stan::math::fill(WX, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 267;
            stan::math::assign(is_gaussian, logical_eq(family, 1));
            current_statement_begin__ = 268;
            stan::math::assign(is_student, logical_eq(family, 2));
            current_statement_begin__ = 269;
            stan::math::assign(is_poisson, logical_eq(family, 3));
            current_statement_begin__ = 270;
            stan::math::assign(is_binomial, logical_eq(family, 4));
            current_statement_begin__ = 271;
            stan::math::assign(has_sigma, logical_lt(family, 3));
            current_statement_begin__ = 272;
            stan::math::assign(has_offset, logical_neq(sum(offset), 0));
            current_statement_begin__ = 273;
            stan::math::assign(dx_all, ((dx_obs + dx_me_bounded) + dx_me_unbounded));
            current_statement_begin__ = 274;
            stan::math::assign(has_me, logical_gt(dx_all, dx_obs));
            current_statement_begin__ = 275;
            if (as_bool(dwx)) {
                current_statement_begin__ = 276;
                stan::math::assign(w, csr_extract_w(W));
                current_statement_begin__ = 277;
                stan::math::assign(v, csr_extract_v(W));
                current_statement_begin__ = 278;
                stan::math::assign(u, csr_extract_u(W));
            }
            current_statement_begin__ = 280;
            if (as_bool((primitive_value(logical_negation(has_me)) && primitive_value(dwx)))) {
                current_statement_begin__ = 281;
                stan::math::assign(WX, multiply(W, stan::model::rvalue(x_obs, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(wx_idx), stan::model::nil_index_list())), "x_obs")));
            }
            current_statement_begin__ = 283;
            if (as_bool(dx_me_unbounded)) {
                current_statement_begin__ = 284;
                for (int j = 1; j <= dx_me_unbounded; ++j) {
                    current_statement_begin__ = 285;
                    stan::model::assign(prior_scale_x_true_unbounded, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                sd(get_base1(x_me_unbounded, j, "x_me_unbounded", 1)), 
                                "assigning variable prior_scale_x_true_unbounded");
                    current_statement_begin__ = 286;
                    stan::model::assign(prior_mean_x_true_unbounded, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                mean(get_base1(x_me_unbounded, j, "x_me_unbounded", 1)), 
                                "assigning variable prior_mean_x_true_unbounded");
                }
            }
            current_statement_begin__ = 289;
            if (as_bool(dx_me_bounded)) {
                current_statement_begin__ = 290;
                for (int j = 1; j <= dx_me_bounded; ++j) {
                    current_statement_begin__ = 291;
                    stan::model::assign(prior_scale_x_true_bounded, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                sd(get_base1(x_me_bounded, j, "x_me_bounded", 1)), 
                                "assigning variable prior_scale_x_true_bounded");
                    current_statement_begin__ = 292;
                    stan::model::assign(prior_mean_x_true_bounded, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                mean(get_base1(x_me_bounded, j, "x_me_bounded", 1)), 
                                "assigning variable prior_mean_x_true_bounded");
                }
            }
            current_statement_begin__ = 297;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 297;
                stan::model::assign(invsqrtD, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1 / stan::math::sqrt(get_base1(D_diag, i, "D_diag", 1))), 
                            "assigning variable invsqrtD");
            }
            current_statement_begin__ = 298;
            stan::math::assign(lambda, eigenvalues_sym(quad_form_diag(C, invsqrtD)));
            // validate transformed data
            current_statement_begin__ = 251;
            check_greater_or_equal(function__, "is_gaussian", is_gaussian, 0);
            check_less_or_equal(function__, "is_gaussian", is_gaussian, 1);
            current_statement_begin__ = 252;
            check_greater_or_equal(function__, "is_student", is_student, 0);
            check_less_or_equal(function__, "is_student", is_student, 1);
            current_statement_begin__ = 253;
            check_greater_or_equal(function__, "is_poisson", is_poisson, 0);
            check_less_or_equal(function__, "is_poisson", is_poisson, 1);
            current_statement_begin__ = 254;
            check_greater_or_equal(function__, "is_binomial", is_binomial, 0);
            check_less_or_equal(function__, "is_binomial", is_binomial, 1);
            current_statement_begin__ = 255;
            check_greater_or_equal(function__, "has_me", has_me, 0);
            check_less_or_equal(function__, "has_me", has_me, 1);
            current_statement_begin__ = 256;
            check_greater_or_equal(function__, "has_sigma", has_sigma, 0);
            check_less_or_equal(function__, "has_sigma", has_sigma, 1);
            current_statement_begin__ = 257;
            check_greater_or_equal(function__, "has_offset", has_offset, 0);
            check_less_or_equal(function__, "has_offset", has_offset, 1);
            current_statement_begin__ = 258;
            check_greater_or_equal(function__, "dx_all", dx_all, 0);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 302;
            validate_non_negative_index("phi", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 303;
            num_params_r__ += 1;
            current_statement_begin__ = 304;
            num_params_r__ += 1;
            current_statement_begin__ = 306;
            num_params_r__ += 1;
            current_statement_begin__ = 307;
            validate_non_negative_index("gamma", "dwx", dwx);
            num_params_r__ += dwx;
            current_statement_begin__ = 308;
            validate_non_negative_index("beta", "dx_all", dx_all);
            num_params_r__ += dx_all;
            current_statement_begin__ = 309;
            validate_non_negative_index("nu", "is_student", is_student);
            num_params_r__ += (1 * is_student);
            current_statement_begin__ = 310;
            validate_non_negative_index("sigma", "has_sigma", has_sigma);
            num_params_r__ += (1 * has_sigma);
            current_statement_begin__ = 312;
            validate_non_negative_index("alpha_re_tilde", "n_ids", n_ids);
            num_params_r__ += n_ids;
            current_statement_begin__ = 313;
            validate_non_negative_index("alpha_tau", "has_re", has_re);
            num_params_r__ += (1 * has_re);
            current_statement_begin__ = 316;
            validate_non_negative_index("mu_x_true_bounded", "dx_me_bounded", dx_me_bounded);
            num_params_r__ += dx_me_bounded;
            current_statement_begin__ = 317;
            validate_non_negative_index("sigma_x_true_bounded", "dx_me_bounded", dx_me_bounded);
            num_params_r__ += dx_me_bounded;
            current_statement_begin__ = 318;
            validate_non_negative_index("nu_x_true_bounded", "dx_me_bounded", dx_me_bounded);
            num_params_r__ += dx_me_bounded;
            current_statement_begin__ = 320;
            validate_non_negative_index("mu_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
            num_params_r__ += dx_me_unbounded;
            current_statement_begin__ = 321;
            validate_non_negative_index("sigma_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
            num_params_r__ += dx_me_unbounded;
            current_statement_begin__ = 322;
            validate_non_negative_index("nu_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
            num_params_r__ += dx_me_unbounded;
            current_statement_begin__ = 325;
            validate_non_negative_index("x_true_unbounded", "n", n);
            validate_non_negative_index("x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
            num_params_r__ += (n * dx_me_unbounded);
            current_statement_begin__ = 326;
            validate_non_negative_index("x_true_bounded", "n", n);
            validate_non_negative_index("x_true_bounded", "dx_me_bounded", dx_me_bounded);
            num_params_r__ += (n * dx_me_bounded);
            current_statement_begin__ = 328;
            validate_non_negative_index("aux1_global_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            num_params_r__ += (spatial_me ? dx_me_unbounded : 0 );
            current_statement_begin__ = 329;
            validate_non_negative_index("aux2_global_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            num_params_r__ += (spatial_me ? dx_me_unbounded : 0 );
            current_statement_begin__ = 330;
            validate_non_negative_index("aux1_local_me_unbounded", "dev", dev);
            validate_non_negative_index("aux1_local_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            num_params_r__ += (dev * (spatial_me ? dx_me_unbounded : 0 ));
            current_statement_begin__ = 331;
            validate_non_negative_index("aux2_local_me_unbounded", "dev", dev);
            validate_non_negative_index("aux2_local_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            num_params_r__ += (dev * (spatial_me ? dx_me_unbounded : 0 ));
            current_statement_begin__ = 332;
            validate_non_negative_index("caux_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            num_params_r__ += (spatial_me ? dx_me_unbounded : 0 );
            current_statement_begin__ = 333;
            validate_non_negative_index("z_ev_me_unbounded", "dev", dev);
            validate_non_negative_index("z_ev_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            num_params_r__ += (dev * (spatial_me ? dx_me_unbounded : 0 ));
            current_statement_begin__ = 335;
            validate_non_negative_index("aux1_global_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            num_params_r__ += (spatial_me ? dx_me_bounded : 0 );
            current_statement_begin__ = 336;
            validate_non_negative_index("aux2_global_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            num_params_r__ += (spatial_me ? dx_me_bounded : 0 );
            current_statement_begin__ = 337;
            validate_non_negative_index("aux1_local_me_bounded", "dev", dev);
            validate_non_negative_index("aux1_local_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            num_params_r__ += (dev * (spatial_me ? dx_me_bounded : 0 ));
            current_statement_begin__ = 338;
            validate_non_negative_index("aux2_local_me_bounded", "dev", dev);
            validate_non_negative_index("aux2_local_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            num_params_r__ += (dev * (spatial_me ? dx_me_bounded : 0 ));
            current_statement_begin__ = 339;
            validate_non_negative_index("caux_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            num_params_r__ += (spatial_me ? dx_me_bounded : 0 );
            current_statement_begin__ = 340;
            validate_non_negative_index("z_ev_me_bounded", "dev", dev);
            validate_non_negative_index("z_ev_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            num_params_r__ += (dev * (spatial_me ? dx_me_bounded : 0 ));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_car() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 302;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "n", n);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(n));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi(n);
        size_t phi_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 303;
        if (!(context__.contains_r("car_precision")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable car_precision missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("car_precision");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "car_precision", "double", context__.to_vec());
        double car_precision(0);
        car_precision = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, car_precision);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable car_precision: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 304;
        if (!(context__.contains_r("car_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable car_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("car_alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "car_alpha", "double", context__.to_vec());
        double car_alpha(0);
        car_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain((1 / min(lambda)), (1 / max(lambda)), car_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable car_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 306;
        if (!(context__.contains_r("intercept")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable intercept missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("intercept");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "intercept", "double", context__.to_vec());
        double intercept(0);
        intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable intercept: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 307;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "dwx", dwx);
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec(dwx));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(dwx);
        size_t gamma_j_1_max__ = dwx;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 308;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "dx_all", dx_all);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(dx_all));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(dx_all);
        size_t beta_j_1_max__ = dx_all;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 309;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "is_student", is_student);
        context__.validate_dims("parameter initialization", "nu", "double", context__.to_vec(is_student));
        std::vector<double> nu(is_student, double(0));
        size_t nu_k_0_max__ = is_student;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            nu[k_0__] = vals_r__[pos__++];
        }
        size_t nu_i_0_max__ = is_student;
        for (size_t i_0__ = 0; i_0__ < nu_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, nu[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 310;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "has_sigma", has_sigma);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(has_sigma));
        std::vector<double> sigma(has_sigma, double(0));
        size_t sigma_k_0_max__ = has_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = has_sigma;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 312;
        if (!(context__.contains_r("alpha_re_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_re_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_re_tilde");
        pos__ = 0U;
        validate_non_negative_index("alpha_re_tilde", "n_ids", n_ids);
        context__.validate_dims("parameter initialization", "alpha_re_tilde", "vector_d", context__.to_vec(n_ids));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re_tilde(n_ids);
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            alpha_re_tilde(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha_re_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_re_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 313;
        if (!(context__.contains_r("alpha_tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_tau");
        pos__ = 0U;
        validate_non_negative_index("alpha_tau", "has_re", has_re);
        context__.validate_dims("parameter initialization", "alpha_tau", "double", context__.to_vec(has_re));
        std::vector<double> alpha_tau(has_re, double(0));
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            alpha_tau[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_tau_i_0_max__ = has_re;
        for (size_t i_0__ = 0; i_0__ < alpha_tau_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_tau[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_tau: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 316;
        if (!(context__.contains_r("mu_x_true_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_x_true_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_x_true_bounded");
        pos__ = 0U;
        validate_non_negative_index("mu_x_true_bounded", "dx_me_bounded", dx_me_bounded);
        context__.validate_dims("parameter initialization", "mu_x_true_bounded", "vector_d", context__.to_vec(dx_me_bounded));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_x_true_bounded(dx_me_bounded);
        size_t mu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_bounded_j_1_max__; ++j_1__) {
            mu_x_true_bounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), mu_x_true_bounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_x_true_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 317;
        if (!(context__.contains_r("sigma_x_true_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_x_true_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_x_true_bounded");
        pos__ = 0U;
        validate_non_negative_index("sigma_x_true_bounded", "dx_me_bounded", dx_me_bounded);
        context__.validate_dims("parameter initialization", "sigma_x_true_bounded", "vector_d", context__.to_vec(dx_me_bounded));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_x_true_bounded(dx_me_bounded);
        size_t sigma_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_bounded_j_1_max__; ++j_1__) {
            sigma_x_true_bounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_x_true_bounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_x_true_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 318;
        if (!(context__.contains_r("nu_x_true_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu_x_true_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu_x_true_bounded");
        pos__ = 0U;
        validate_non_negative_index("nu_x_true_bounded", "dx_me_bounded", dx_me_bounded);
        context__.validate_dims("parameter initialization", "nu_x_true_bounded", "vector_d", context__.to_vec(dx_me_bounded));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu_x_true_bounded(dx_me_bounded);
        size_t nu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_bounded_j_1_max__; ++j_1__) {
            nu_x_true_bounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, nu_x_true_bounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu_x_true_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 320;
        if (!(context__.contains_r("mu_x_true_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_x_true_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_x_true_unbounded");
        pos__ = 0U;
        validate_non_negative_index("mu_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
        context__.validate_dims("parameter initialization", "mu_x_true_unbounded", "vector_d", context__.to_vec(dx_me_unbounded));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_x_true_unbounded(dx_me_unbounded);
        size_t mu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_unbounded_j_1_max__; ++j_1__) {
            mu_x_true_unbounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), mu_x_true_unbounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_x_true_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 321;
        if (!(context__.contains_r("sigma_x_true_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_x_true_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_x_true_unbounded");
        pos__ = 0U;
        validate_non_negative_index("sigma_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
        context__.validate_dims("parameter initialization", "sigma_x_true_unbounded", "vector_d", context__.to_vec(dx_me_unbounded));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_x_true_unbounded(dx_me_unbounded);
        size_t sigma_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_unbounded_j_1_max__; ++j_1__) {
            sigma_x_true_unbounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_x_true_unbounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_x_true_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 322;
        if (!(context__.contains_r("nu_x_true_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu_x_true_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu_x_true_unbounded");
        pos__ = 0U;
        validate_non_negative_index("nu_x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
        context__.validate_dims("parameter initialization", "nu_x_true_unbounded", "vector_d", context__.to_vec(dx_me_unbounded));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu_x_true_unbounded(dx_me_unbounded);
        size_t nu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_unbounded_j_1_max__; ++j_1__) {
            nu_x_true_unbounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, nu_x_true_unbounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu_x_true_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 325;
        if (!(context__.contains_r("x_true_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x_true_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x_true_unbounded");
        pos__ = 0U;
        validate_non_negative_index("x_true_unbounded", "n", n);
        validate_non_negative_index("x_true_unbounded", "dx_me_unbounded", dx_me_unbounded);
        context__.validate_dims("parameter initialization", "x_true_unbounded", "vector_d", context__.to_vec(dx_me_unbounded,n));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > x_true_unbounded(dx_me_unbounded, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
        size_t x_true_unbounded_j_1_max__ = n;
        size_t x_true_unbounded_k_0_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < x_true_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_unbounded_k_0_max__; ++k_0__) {
                x_true_unbounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t x_true_unbounded_i_0_max__ = dx_me_unbounded;
        for (size_t i_0__ = 0; i_0__ < x_true_unbounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(x_true_unbounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x_true_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 326;
        if (!(context__.contains_r("x_true_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x_true_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x_true_bounded");
        pos__ = 0U;
        validate_non_negative_index("x_true_bounded", "n", n);
        validate_non_negative_index("x_true_bounded", "dx_me_bounded", dx_me_bounded);
        context__.validate_dims("parameter initialization", "x_true_bounded", "vector_d", context__.to_vec(dx_me_bounded,n));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > x_true_bounded(dx_me_bounded, Eigen::Matrix<double, Eigen::Dynamic, 1>(n));
        size_t x_true_bounded_j_1_max__ = n;
        size_t x_true_bounded_k_0_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < x_true_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_bounded_k_0_max__; ++k_0__) {
                x_true_bounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t x_true_bounded_i_0_max__ = dx_me_bounded;
        for (size_t i_0__ = 0; i_0__ < x_true_bounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), x_true_bounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x_true_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 328;
        if (!(context__.contains_r("aux1_global_me_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_global_me_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_global_me_unbounded");
        pos__ = 0U;
        validate_non_negative_index("aux1_global_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
        context__.validate_dims("parameter initialization", "aux1_global_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_global_me_unbounded((spatial_me ? dx_me_unbounded : 0 ));
        size_t aux1_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_unbounded_j_1_max__; ++j_1__) {
            aux1_global_me_unbounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux1_global_me_unbounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_global_me_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 329;
        if (!(context__.contains_r("aux2_global_me_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_global_me_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_global_me_unbounded");
        pos__ = 0U;
        validate_non_negative_index("aux2_global_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
        context__.validate_dims("parameter initialization", "aux2_global_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_global_me_unbounded((spatial_me ? dx_me_unbounded : 0 ));
        size_t aux2_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_unbounded_j_1_max__; ++j_1__) {
            aux2_global_me_unbounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux2_global_me_unbounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_global_me_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 330;
        if (!(context__.contains_r("aux1_local_me_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_local_me_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_local_me_unbounded");
        pos__ = 0U;
        validate_non_negative_index("aux1_local_me_unbounded", "dev", dev);
        validate_non_negative_index("aux1_local_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
        context__.validate_dims("parameter initialization", "aux1_local_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 ),dev));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux1_local_me_unbounded((spatial_me ? dx_me_unbounded : 0 ), Eigen::Matrix<double, Eigen::Dynamic, 1>(dev));
        size_t aux1_local_me_unbounded_j_1_max__ = dev;
        size_t aux1_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_unbounded_k_0_max__; ++k_0__) {
                aux1_local_me_unbounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t aux1_local_me_unbounded_i_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t i_0__ = 0; i_0__ < aux1_local_me_unbounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, aux1_local_me_unbounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_local_me_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 331;
        if (!(context__.contains_r("aux2_local_me_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_local_me_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_local_me_unbounded");
        pos__ = 0U;
        validate_non_negative_index("aux2_local_me_unbounded", "dev", dev);
        validate_non_negative_index("aux2_local_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
        context__.validate_dims("parameter initialization", "aux2_local_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 ),dev));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux2_local_me_unbounded((spatial_me ? dx_me_unbounded : 0 ), Eigen::Matrix<double, Eigen::Dynamic, 1>(dev));
        size_t aux2_local_me_unbounded_j_1_max__ = dev;
        size_t aux2_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_unbounded_k_0_max__; ++k_0__) {
                aux2_local_me_unbounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t aux2_local_me_unbounded_i_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t i_0__ = 0; i_0__ < aux2_local_me_unbounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, aux2_local_me_unbounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_local_me_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 332;
        if (!(context__.contains_r("caux_me_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable caux_me_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("caux_me_unbounded");
        pos__ = 0U;
        validate_non_negative_index("caux_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
        context__.validate_dims("parameter initialization", "caux_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> caux_me_unbounded((spatial_me ? dx_me_unbounded : 0 ));
        size_t caux_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_unbounded_j_1_max__; ++j_1__) {
            caux_me_unbounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, caux_me_unbounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable caux_me_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 333;
        if (!(context__.contains_r("z_ev_me_unbounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_ev_me_unbounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_ev_me_unbounded");
        pos__ = 0U;
        validate_non_negative_index("z_ev_me_unbounded", "dev", dev);
        validate_non_negative_index("z_ev_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
        context__.validate_dims("parameter initialization", "z_ev_me_unbounded", "vector_d", context__.to_vec((spatial_me ? dx_me_unbounded : 0 ),dev));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_ev_me_unbounded((spatial_me ? dx_me_unbounded : 0 ), Eigen::Matrix<double, Eigen::Dynamic, 1>(dev));
        size_t z_ev_me_unbounded_j_1_max__ = dev;
        size_t z_ev_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_unbounded_k_0_max__; ++k_0__) {
                z_ev_me_unbounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t z_ev_me_unbounded_i_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t i_0__ = 0; i_0__ < z_ev_me_unbounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(z_ev_me_unbounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_ev_me_unbounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 335;
        if (!(context__.contains_r("aux1_global_me_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_global_me_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_global_me_bounded");
        pos__ = 0U;
        validate_non_negative_index("aux1_global_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
        context__.validate_dims("parameter initialization", "aux1_global_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_global_me_bounded((spatial_me ? dx_me_bounded : 0 ));
        size_t aux1_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_bounded_j_1_max__; ++j_1__) {
            aux1_global_me_bounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux1_global_me_bounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_global_me_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 336;
        if (!(context__.contains_r("aux2_global_me_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_global_me_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_global_me_bounded");
        pos__ = 0U;
        validate_non_negative_index("aux2_global_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
        context__.validate_dims("parameter initialization", "aux2_global_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_global_me_bounded((spatial_me ? dx_me_bounded : 0 ));
        size_t aux2_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_bounded_j_1_max__; ++j_1__) {
            aux2_global_me_bounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux2_global_me_bounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_global_me_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 337;
        if (!(context__.contains_r("aux1_local_me_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_local_me_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_local_me_bounded");
        pos__ = 0U;
        validate_non_negative_index("aux1_local_me_bounded", "dev", dev);
        validate_non_negative_index("aux1_local_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
        context__.validate_dims("parameter initialization", "aux1_local_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 ),dev));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux1_local_me_bounded((spatial_me ? dx_me_bounded : 0 ), Eigen::Matrix<double, Eigen::Dynamic, 1>(dev));
        size_t aux1_local_me_bounded_j_1_max__ = dev;
        size_t aux1_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_bounded_k_0_max__; ++k_0__) {
                aux1_local_me_bounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t aux1_local_me_bounded_i_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t i_0__ = 0; i_0__ < aux1_local_me_bounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, aux1_local_me_bounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_local_me_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 338;
        if (!(context__.contains_r("aux2_local_me_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_local_me_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_local_me_bounded");
        pos__ = 0U;
        validate_non_negative_index("aux2_local_me_bounded", "dev", dev);
        validate_non_negative_index("aux2_local_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
        context__.validate_dims("parameter initialization", "aux2_local_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 ),dev));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux2_local_me_bounded((spatial_me ? dx_me_bounded : 0 ), Eigen::Matrix<double, Eigen::Dynamic, 1>(dev));
        size_t aux2_local_me_bounded_j_1_max__ = dev;
        size_t aux2_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_bounded_k_0_max__; ++k_0__) {
                aux2_local_me_bounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t aux2_local_me_bounded_i_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t i_0__ = 0; i_0__ < aux2_local_me_bounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, aux2_local_me_bounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_local_me_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 339;
        if (!(context__.contains_r("caux_me_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable caux_me_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("caux_me_bounded");
        pos__ = 0U;
        validate_non_negative_index("caux_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
        context__.validate_dims("parameter initialization", "caux_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> caux_me_bounded((spatial_me ? dx_me_bounded : 0 ));
        size_t caux_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_bounded_j_1_max__; ++j_1__) {
            caux_me_bounded(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, caux_me_bounded);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable caux_me_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 340;
        if (!(context__.contains_r("z_ev_me_bounded")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_ev_me_bounded missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_ev_me_bounded");
        pos__ = 0U;
        validate_non_negative_index("z_ev_me_bounded", "dev", dev);
        validate_non_negative_index("z_ev_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
        context__.validate_dims("parameter initialization", "z_ev_me_bounded", "vector_d", context__.to_vec((spatial_me ? dx_me_bounded : 0 ),dev));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_ev_me_bounded((spatial_me ? dx_me_bounded : 0 ), Eigen::Matrix<double, Eigen::Dynamic, 1>(dev));
        size_t z_ev_me_bounded_j_1_max__ = dev;
        size_t z_ev_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_bounded_k_0_max__; ++k_0__) {
                z_ev_me_bounded[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t z_ev_me_bounded_i_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t i_0__ = 0; i_0__ < z_ev_me_bounded_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(z_ev_me_bounded[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_ev_me_bounded: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 302;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.vector_constrain(n, lp__);
            else
                phi = in__.vector_constrain(n);
            current_statement_begin__ = 303;
            local_scalar_t__ car_precision;
            (void) car_precision;  // dummy to suppress unused var warning
            if (jacobian__)
                car_precision = in__.scalar_lb_constrain(0, lp__);
            else
                car_precision = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 304;
            local_scalar_t__ car_alpha;
            (void) car_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                car_alpha = in__.scalar_lub_constrain((1 / min(lambda)), (1 / max(lambda)), lp__);
            else
                car_alpha = in__.scalar_lub_constrain((1 / min(lambda)), (1 / max(lambda)));
            current_statement_begin__ = 306;
            local_scalar_t__ intercept;
            (void) intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                intercept = in__.scalar_constrain(lp__);
            else
                intercept = in__.scalar_constrain();
            current_statement_begin__ = 307;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_constrain(dwx, lp__);
            else
                gamma = in__.vector_constrain(dwx);
            current_statement_begin__ = 308;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(dx_all, lp__);
            else
                beta = in__.vector_constrain(dx_all);
            current_statement_begin__ = 309;
            std::vector<local_scalar_t__> nu;
            size_t nu_d_0_max__ = is_student;
            nu.reserve(nu_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < nu_d_0_max__; ++d_0__) {
                if (jacobian__)
                    nu.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    nu.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 310;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = has_sigma;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 312;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_re_tilde;
            (void) alpha_re_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_re_tilde = in__.vector_constrain(n_ids, lp__);
            else
                alpha_re_tilde = in__.vector_constrain(n_ids);
            current_statement_begin__ = 313;
            std::vector<local_scalar_t__> alpha_tau;
            size_t alpha_tau_d_0_max__ = has_re;
            alpha_tau.reserve(alpha_tau_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_tau_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_tau.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_tau.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 316;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_x_true_bounded;
            (void) mu_x_true_bounded;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_x_true_bounded = in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), dx_me_bounded, lp__);
            else
                mu_x_true_bounded = in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), dx_me_bounded);
            current_statement_begin__ = 317;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_x_true_bounded;
            (void) sigma_x_true_bounded;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_x_true_bounded = in__.vector_lb_constrain(0, dx_me_bounded, lp__);
            else
                sigma_x_true_bounded = in__.vector_lb_constrain(0, dx_me_bounded);
            current_statement_begin__ = 318;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu_x_true_bounded;
            (void) nu_x_true_bounded;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_x_true_bounded = in__.vector_lb_constrain(0, dx_me_bounded, lp__);
            else
                nu_x_true_bounded = in__.vector_lb_constrain(0, dx_me_bounded);
            current_statement_begin__ = 320;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_x_true_unbounded;
            (void) mu_x_true_unbounded;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_x_true_unbounded = in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), dx_me_unbounded, lp__);
            else
                mu_x_true_unbounded = in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), dx_me_unbounded);
            current_statement_begin__ = 321;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_x_true_unbounded;
            (void) sigma_x_true_unbounded;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_x_true_unbounded = in__.vector_lb_constrain(0, dx_me_unbounded, lp__);
            else
                sigma_x_true_unbounded = in__.vector_lb_constrain(0, dx_me_unbounded);
            current_statement_begin__ = 322;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu_x_true_unbounded;
            (void) nu_x_true_unbounded;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_x_true_unbounded = in__.vector_lb_constrain(0, dx_me_unbounded, lp__);
            else
                nu_x_true_unbounded = in__.vector_lb_constrain(0, dx_me_unbounded);
            current_statement_begin__ = 325;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > x_true_unbounded;
            size_t x_true_unbounded_d_0_max__ = dx_me_unbounded;
            x_true_unbounded.reserve(x_true_unbounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < x_true_unbounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    x_true_unbounded.push_back(in__.vector_constrain(n, lp__));
                else
                    x_true_unbounded.push_back(in__.vector_constrain(n));
            }
            current_statement_begin__ = 326;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > x_true_bounded;
            size_t x_true_bounded_d_0_max__ = dx_me_bounded;
            x_true_bounded.reserve(x_true_bounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < x_true_bounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    x_true_bounded.push_back(in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), n, lp__));
                else
                    x_true_bounded.push_back(in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), n));
            }
            current_statement_begin__ = 328;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux1_global_me_unbounded;
            (void) aux1_global_me_unbounded;  // dummy to suppress unused var warning
            if (jacobian__)
                aux1_global_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ), lp__);
            else
                aux1_global_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ));
            current_statement_begin__ = 329;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux2_global_me_unbounded;
            (void) aux2_global_me_unbounded;  // dummy to suppress unused var warning
            if (jacobian__)
                aux2_global_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ), lp__);
            else
                aux2_global_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ));
            current_statement_begin__ = 330;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > aux1_local_me_unbounded;
            size_t aux1_local_me_unbounded_d_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
            aux1_local_me_unbounded.reserve(aux1_local_me_unbounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < aux1_local_me_unbounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    aux1_local_me_unbounded.push_back(in__.vector_lb_constrain(0, dev, lp__));
                else
                    aux1_local_me_unbounded.push_back(in__.vector_lb_constrain(0, dev));
            }
            current_statement_begin__ = 331;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > aux2_local_me_unbounded;
            size_t aux2_local_me_unbounded_d_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
            aux2_local_me_unbounded.reserve(aux2_local_me_unbounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < aux2_local_me_unbounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    aux2_local_me_unbounded.push_back(in__.vector_lb_constrain(0, dev, lp__));
                else
                    aux2_local_me_unbounded.push_back(in__.vector_lb_constrain(0, dev));
            }
            current_statement_begin__ = 332;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> caux_me_unbounded;
            (void) caux_me_unbounded;  // dummy to suppress unused var warning
            if (jacobian__)
                caux_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ), lp__);
            else
                caux_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ));
            current_statement_begin__ = 333;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > z_ev_me_unbounded;
            size_t z_ev_me_unbounded_d_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
            z_ev_me_unbounded.reserve(z_ev_me_unbounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_ev_me_unbounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z_ev_me_unbounded.push_back(in__.vector_constrain(dev, lp__));
                else
                    z_ev_me_unbounded.push_back(in__.vector_constrain(dev));
            }
            current_statement_begin__ = 335;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux1_global_me_bounded;
            (void) aux1_global_me_bounded;  // dummy to suppress unused var warning
            if (jacobian__)
                aux1_global_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ), lp__);
            else
                aux1_global_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ));
            current_statement_begin__ = 336;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux2_global_me_bounded;
            (void) aux2_global_me_bounded;  // dummy to suppress unused var warning
            if (jacobian__)
                aux2_global_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ), lp__);
            else
                aux2_global_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ));
            current_statement_begin__ = 337;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > aux1_local_me_bounded;
            size_t aux1_local_me_bounded_d_0_max__ = (spatial_me ? dx_me_bounded : 0 );
            aux1_local_me_bounded.reserve(aux1_local_me_bounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < aux1_local_me_bounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    aux1_local_me_bounded.push_back(in__.vector_lb_constrain(0, dev, lp__));
                else
                    aux1_local_me_bounded.push_back(in__.vector_lb_constrain(0, dev));
            }
            current_statement_begin__ = 338;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > aux2_local_me_bounded;
            size_t aux2_local_me_bounded_d_0_max__ = (spatial_me ? dx_me_bounded : 0 );
            aux2_local_me_bounded.reserve(aux2_local_me_bounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < aux2_local_me_bounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    aux2_local_me_bounded.push_back(in__.vector_lb_constrain(0, dev, lp__));
                else
                    aux2_local_me_bounded.push_back(in__.vector_lb_constrain(0, dev));
            }
            current_statement_begin__ = 339;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> caux_me_bounded;
            (void) caux_me_bounded;  // dummy to suppress unused var warning
            if (jacobian__)
                caux_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ), lp__);
            else
                caux_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ));
            current_statement_begin__ = 340;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > z_ev_me_bounded;
            size_t z_ev_me_bounded_d_0_max__ = (spatial_me ? dx_me_bounded : 0 );
            z_ev_me_bounded.reserve(z_ev_me_bounded_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_ev_me_bounded_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z_ev_me_bounded.push_back(in__.vector_constrain(dev, lp__));
                else
                    z_ev_me_bounded.push_back(in__.vector_constrain(dev));
            }
            // transformed parameters
            current_statement_begin__ = 345;
            local_scalar_t__ car_scale;
            (void) car_scale;  // dummy to suppress unused var warning
            stan::math::initialize(car_scale, DUMMY_VAR__);
            stan::math::fill(car_scale, DUMMY_VAR__);
            stan::math::assign(car_scale,(1 / stan::math::sqrt(car_precision)));
            current_statement_begin__ = 347;
            validate_non_negative_index("x_all", "n", n);
            validate_non_negative_index("x_all", "dx_all", dx_all);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x_all(n, dx_all);
            stan::math::initialize(x_all, DUMMY_VAR__);
            stan::math::fill(x_all, DUMMY_VAR__);
            current_statement_begin__ = 348;
            validate_non_negative_index("f", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f(n);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 349;
            if (as_bool(dx_obs)) {
                current_statement_begin__ = 349;
                stan::model::assign(x_all, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(x_obs_idx), stan::model::nil_index_list())), 
                            x_obs, 
                            "assigning variable x_all");
            }
            current_statement_begin__ = 350;
            if (as_bool(dx_me_unbounded)) {
                current_statement_begin__ = 350;
                for (int j = 1; j <= dx_me_unbounded; ++j) {
                    current_statement_begin__ = 350;
                    stan::model::assign(x_all, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(x_me_unbounded_idx, j, "x_me_unbounded_idx", 1)), stan::model::nil_index_list())), 
                                get_base1(x_true_unbounded, j, "x_true_unbounded", 1), 
                                "assigning variable x_all");
                }
            }
            current_statement_begin__ = 351;
            if (as_bool(dx_me_bounded)) {
                current_statement_begin__ = 351;
                for (int j = 1; j <= dx_me_bounded; ++j) {
                    current_statement_begin__ = 351;
                    stan::model::assign(x_all, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(x_me_bounded_idx, j, "x_me_bounded_idx", 1)), stan::model::nil_index_list())), 
                                get_base1(x_true_bounded, j, "x_true_bounded", 1), 
                                "assigning variable x_all");
                }
            }
            current_statement_begin__ = 352;
            stan::math::assign(f, add(offset, intercept));
            current_statement_begin__ = 354;
            stan::math::assign(f, add(f, phi));
            current_statement_begin__ = 355;
            if (as_bool(has_re)) {
                current_statement_begin__ = 356;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 357;
                    stan::model::assign(f, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(f, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "f") + (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, get_base1(id, i, "id", 1), "alpha_re_tilde", 1))), 
                                "assigning variable f");
                }
            }
            current_statement_begin__ = 360;
            if (as_bool(dwx)) {
                current_statement_begin__ = 361;
                if (as_bool(has_me)) {
                    current_statement_begin__ = 362;
                    for (int i = 1; i <= dwx; ++i) {
                        current_statement_begin__ = 363;
                        stan::math::assign(f, add(f, multiply(csr_matrix_times_vector(n, n, w, v, u, stan::model::rvalue(x_all, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(wx_idx, i, "wx_idx", 1)), stan::model::nil_index_list())), "x_all")), get_base1(gamma, i, "gamma", 1))));
                    }
                } else {
                    current_statement_begin__ = 366;
                    stan::math::assign(f, add(f, multiply(WX, gamma)));
                }
            }
            current_statement_begin__ = 369;
            if (as_bool(dx_all)) {
                current_statement_begin__ = 369;
                stan::math::assign(f, add(f, multiply(x_all, beta)));
            }
            current_statement_begin__ = 370;
            if (as_bool(is_binomial)) {
                current_statement_begin__ = 370;
                stan::math::assign(f, inv_logit(f));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 345;
            if (stan::math::is_uninitialized(car_scale)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: car_scale";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable car_scale: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "car_scale", car_scale, 0);
            current_statement_begin__ = 347;
            size_t x_all_j_1_max__ = n;
            size_t x_all_j_2_max__ = dx_all;
            for (size_t j_1__ = 0; j_1__ < x_all_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < x_all_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(x_all(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x_all" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x_all: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 348;
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(f(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: f" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 380;
            validate_non_negative_index("beta_ev_me_unbounded", "dev", dev);
            validate_non_negative_index("beta_ev_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > beta_ev_me_unbounded((spatial_me ? dx_me_unbounded : 0 ), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(dev));
            stan::math::initialize(beta_ev_me_unbounded, DUMMY_VAR__);
            stan::math::fill(beta_ev_me_unbounded, DUMMY_VAR__);
            current_statement_begin__ = 381;
            validate_non_negative_index("fitted_me_unbounded", "n", n);
            validate_non_negative_index("fitted_me_unbounded", "(spatial_me ? dx_me_unbounded : 0 )", (spatial_me ? dx_me_unbounded : 0 ));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > fitted_me_unbounded((spatial_me ? dx_me_unbounded : 0 ), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
            stan::math::initialize(fitted_me_unbounded, DUMMY_VAR__);
            stan::math::fill(fitted_me_unbounded, DUMMY_VAR__);
            current_statement_begin__ = 383;
            validate_non_negative_index("beta_ev_me_bounded", "dev", dev);
            validate_non_negative_index("beta_ev_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > beta_ev_me_bounded((spatial_me ? dx_me_bounded : 0 ), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(dev));
            stan::math::initialize(beta_ev_me_bounded, DUMMY_VAR__);
            stan::math::fill(beta_ev_me_bounded, DUMMY_VAR__);
            current_statement_begin__ = 384;
            validate_non_negative_index("fitted_me_bounded", "n", n);
            validate_non_negative_index("fitted_me_bounded", "(spatial_me ? dx_me_bounded : 0 )", (spatial_me ? dx_me_bounded : 0 ));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > fitted_me_bounded((spatial_me ? dx_me_bounded : 0 ), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n));
            stan::math::initialize(fitted_me_bounded, DUMMY_VAR__);
            stan::math::fill(fitted_me_bounded, DUMMY_VAR__);
            current_statement_begin__ = 386;
            lp_accum__.add(normal_log<propto__>(intercept, get_base1(alpha_prior, 1, "alpha_prior", 1), get_base1(alpha_prior, 2, "alpha_prior", 1)));
            current_statement_begin__ = 387;
            if (as_bool(dx_all)) {
                current_statement_begin__ = 387;
                lp_accum__.add(normal_log<propto__>(append_row(gamma, beta), get_base1(beta_prior, 1, "beta_prior", 1), get_base1(beta_prior, 2, "beta_prior", 1)));
            }
            current_statement_begin__ = 388;
            if (as_bool(has_sigma)) {
                current_statement_begin__ = 388;
                lp_accum__.add(student_t_log<propto__>(sigma, get_base1(sigma_prior, 1, "sigma_prior", 1), get_base1(sigma_prior, 2, "sigma_prior", 1), get_base1(sigma_prior, 3, "sigma_prior", 1)));
            }
            current_statement_begin__ = 389;
            if (as_bool(is_student)) {
                current_statement_begin__ = 389;
                lp_accum__.add(gamma_log<propto__>(get_base1(nu, 1, "nu", 1), get_base1(t_nu_prior, 1, "t_nu_prior", 1), get_base1(t_nu_prior, 2, "t_nu_prior", 1)));
            }
            current_statement_begin__ = 391;
            if (as_bool(dx_me_unbounded)) {
                current_statement_begin__ = 392;
                if (as_bool(spatial_me)) {
                    current_statement_begin__ = 393;
                    for (int j = 1; j <= dx_me_unbounded; ++j) {
                        current_statement_begin__ = 394;
                        stan::model::assign(beta_ev_me_unbounded, 
                                    stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                    rhs_prior(dev, get_base1(z_ev_me_unbounded, j, "z_ev_me_unbounded", 1), get_base1(aux1_global_me_unbounded, j, "aux1_global_me_unbounded", 1), get_base1(aux2_global_me_unbounded, j, "aux2_global_me_unbounded", 1), get_base1(aux1_local_me_unbounded, j, "aux1_local_me_unbounded", 1), get_base1(aux2_local_me_unbounded, j, "aux2_local_me_unbounded", 1), get_base1(caux_me_unbounded, j, "caux_me_unbounded", 1), get_base1(scale_global_me_unbounded, j, "scale_global_me_unbounded", 1), get_base1(slab_scale_me_unbounded, j, "slab_scale_me_unbounded", 1), get_base1(sigma_x_true_unbounded, j, "sigma_x_true_unbounded", 1), pstream__), 
                                    "assigning variable beta_ev_me_unbounded");
                        current_statement_begin__ = 403;
                        stan::model::assign(fitted_me_unbounded, 
                                    stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                    add(get_base1(mu_x_true_unbounded, j, "mu_x_true_unbounded", 1), multiply(EV, get_base1(beta_ev_me_unbounded, j, "beta_ev_me_unbounded", 1))), 
                                    "assigning variable fitted_me_unbounded");
                        current_statement_begin__ = 404;
                        lp_accum__.add(std_normal_log<propto__>(get_base1(z_ev_me_unbounded, j, "z_ev_me_unbounded", 1)));
                        current_statement_begin__ = 405;
                        lp_accum__.add(std_normal_log<propto__>(get_base1(aux1_local_me_unbounded, j, "aux1_local_me_unbounded", 1)));
                        current_statement_begin__ = 406;
                        lp_accum__.add(inv_gamma_log<propto__>(get_base1(aux2_local_me_unbounded, j, "aux2_local_me_unbounded", 1), 0.5, 0.5));
                        current_statement_begin__ = 407;
                        lp_accum__.add(inv_gamma_log<propto__>(caux_me_unbounded, (0.5 * get_base1(slab_df_me_unbounded, j, "slab_df_me_unbounded", 1)), (0.5 * get_base1(slab_df_me_unbounded, j, "slab_df_me_unbounded", 1))));
                        current_statement_begin__ = 408;
                        lp_accum__.add(normal_log<propto__>(get_base1(x_me_unbounded, j, "x_me_unbounded", 1), get_base1(x_true_unbounded, j, "x_true_unbounded", 1), get_base1(sigma_me_unbounded, j, "sigma_me_unbounded", 1)));
                        current_statement_begin__ = 409;
                        lp_accum__.add(student_t_log<propto__>(get_base1(x_true_unbounded, j, "x_true_unbounded", 1), get_base1(nu_x_true_unbounded, j, "nu_x_true_unbounded", 1), get_base1(fitted_me_unbounded, j, "fitted_me_unbounded", 1), get_base1(sigma_x_true_unbounded, j, "sigma_x_true_unbounded", 1)));
                    }
                    current_statement_begin__ = 411;
                    lp_accum__.add(std_normal_log<propto__>(aux1_global_me_unbounded));
                    current_statement_begin__ = 412;
                    lp_accum__.add(inv_gamma_log<propto__>(aux2_global_me_unbounded, 0.5, 0.5));
                } else {
                    current_statement_begin__ = 414;
                    for (int j = 1; j <= dx_me_unbounded; ++j) {
                        current_statement_begin__ = 415;
                        lp_accum__.add(normal_log<propto__>(get_base1(x_me_unbounded, j, "x_me_unbounded", 1), get_base1(x_true_unbounded, j, "x_true_unbounded", 1), get_base1(sigma_me_unbounded, j, "sigma_me_unbounded", 1)));
                        current_statement_begin__ = 416;
                        lp_accum__.add(student_t_log<propto__>(get_base1(x_true_unbounded, j, "x_true_unbounded", 1), get_base1(nu_x_true_unbounded, j, "nu_x_true_unbounded", 1), get_base1(mu_x_true_unbounded, j, "mu_x_true_unbounded", 1), get_base1(sigma_x_true_unbounded, j, "sigma_x_true_unbounded", 1)));
                    }
                }
                current_statement_begin__ = 419;
                lp_accum__.add(gamma_log<propto__>(nu_x_true_unbounded, 3, 0.2));
                current_statement_begin__ = 420;
                lp_accum__.add(normal_log<propto__>(mu_x_true_unbounded, prior_mean_x_true_unbounded, multiply(2, prior_scale_x_true_unbounded)));
                current_statement_begin__ = 421;
                lp_accum__.add(student_t_log<propto__>(sigma_x_true_unbounded, 10, 0, multiply(2, prior_scale_x_true_unbounded)));
            }
            current_statement_begin__ = 423;
            if (as_bool(dx_me_bounded)) {
                current_statement_begin__ = 424;
                if (as_bool(spatial_me)) {
                    current_statement_begin__ = 425;
                    for (int j = 1; j <= dx_me_bounded; ++j) {
                        current_statement_begin__ = 426;
                        stan::model::assign(beta_ev_me_bounded, 
                                    stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                    rhs_prior(dev, get_base1(z_ev_me_bounded, j, "z_ev_me_bounded", 1), get_base1(aux1_global_me_bounded, j, "aux1_global_me_bounded", 1), get_base1(aux2_global_me_bounded, j, "aux2_global_me_bounded", 1), get_base1(aux1_local_me_bounded, j, "aux1_local_me_bounded", 1), get_base1(aux2_local_me_bounded, j, "aux2_local_me_bounded", 1), get_base1(caux_me_bounded, j, "caux_me_bounded", 1), get_base1(scale_global_me_bounded, j, "scale_global_me_bounded", 1), get_base1(slab_scale_me_bounded, j, "slab_scale_me_bounded", 1), get_base1(sigma_x_true_bounded, j, "sigma_x_true_bounded", 1), pstream__), 
                                    "assigning variable beta_ev_me_bounded");
                        current_statement_begin__ = 435;
                        stan::model::assign(fitted_me_bounded, 
                                    stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                    add(get_base1(mu_x_true_bounded, j, "mu_x_true_bounded", 1), multiply(EV, get_base1(beta_ev_me_bounded, j, "beta_ev_me_bounded", 1))), 
                                    "assigning variable fitted_me_bounded");
                        current_statement_begin__ = 436;
                        lp_accum__.add(std_normal_log<propto__>(get_base1(z_ev_me_bounded, j, "z_ev_me_bounded", 1)));
                        current_statement_begin__ = 437;
                        lp_accum__.add(std_normal_log<propto__>(get_base1(aux1_local_me_bounded, j, "aux1_local_me_bounded", 1)));
                        current_statement_begin__ = 438;
                        lp_accum__.add(inv_gamma_log<propto__>(get_base1(aux2_local_me_bounded, j, "aux2_local_me_bounded", 1), 0.5, 0.5));
                        current_statement_begin__ = 439;
                        lp_accum__.add(inv_gamma_log<propto__>(caux_me_bounded, (0.5 * get_base1(slab_df_me_bounded, j, "slab_df_me_bounded", 1)), (0.5 * get_base1(slab_df_me_bounded, j, "slab_df_me_bounded", 1))));
                        current_statement_begin__ = 440;
                        lp_accum__.add(normal_log<propto__>(get_base1(x_me_bounded, j, "x_me_bounded", 1), get_base1(x_true_bounded, j, "x_true_bounded", 1), get_base1(sigma_me_bounded, j, "sigma_me_bounded", 1)));
                        current_statement_begin__ = 441;
                        lp_accum__.add(student_t_log<propto__>(get_base1(x_true_bounded, j, "x_true_bounded", 1), get_base1(nu_x_true_bounded, j, "nu_x_true_bounded", 1), get_base1(fitted_me_bounded, j, "fitted_me_bounded", 1), get_base1(sigma_x_true_bounded, j, "sigma_x_true_bounded", 1)));
                    }
                    current_statement_begin__ = 443;
                    lp_accum__.add(std_normal_log<propto__>(aux1_global_me_bounded));
                    current_statement_begin__ = 444;
                    lp_accum__.add(inv_gamma_log<propto__>(aux2_global_me_bounded, 0.5, 0.5));
                } else {
                    current_statement_begin__ = 446;
                    for (int j = 1; j <= dx_me_bounded; ++j) {
                        current_statement_begin__ = 447;
                        lp_accum__.add(normal_log<propto__>(get_base1(x_me_bounded, j, "x_me_bounded", 1), get_base1(x_true_bounded, j, "x_true_bounded", 1), get_base1(sigma_me_bounded, j, "sigma_me_bounded", 1)));
                        current_statement_begin__ = 448;
                        lp_accum__.add(student_t_log<propto__>(get_base1(x_true_bounded, j, "x_true_bounded", 1), get_base1(nu_x_true_bounded, j, "nu_x_true_bounded", 1), get_base1(mu_x_true_bounded, j, "mu_x_true_bounded", 1), get_base1(sigma_x_true_bounded, j, "sigma_x_true_bounded", 1)));
                    }
                }
                current_statement_begin__ = 452;
                lp_accum__.add(gamma_log<propto__>(nu_x_true_bounded, 3, 0.2));
                current_statement_begin__ = 453;
                lp_accum__.add(normal_log<propto__>(mu_x_true_bounded, prior_mean_x_true_unbounded, multiply(2, prior_scale_x_true_bounded)));
                current_statement_begin__ = 454;
                lp_accum__.add(student_t_log<propto__>(sigma_x_true_bounded, 10, 0, multiply(2, prior_scale_x_true_bounded)));
            }
            current_statement_begin__ = 457;
            if (as_bool(has_re)) {
                current_statement_begin__ = 458;
                lp_accum__.add(student_t_log<propto__>(get_base1(alpha_tau, has_re, "alpha_tau", 1), get_base1(alpha_tau_prior, 1, "alpha_tau_prior", 1), get_base1(alpha_tau_prior, 2, "alpha_tau_prior", 1), get_base1(alpha_tau_prior, 3, "alpha_tau_prior", 1)));
                current_statement_begin__ = 459;
                lp_accum__.add(std_normal_log<propto__>(alpha_re_tilde));
            }
            current_statement_begin__ = 462;
            if (as_bool(logical_negation(prior_only))) {
                current_statement_begin__ = 463;
                if (as_bool(is_student)) {
                    current_statement_begin__ = 464;
                    lp_accum__.add(student_t_log<propto__>(y, get_base1(nu, 1, "nu", 1), f, get_base1(sigma, has_sigma, "sigma", 1)));
                }
                current_statement_begin__ = 466;
                if (as_bool(is_gaussian)) {
                    current_statement_begin__ = 466;
                    lp_accum__.add(normal_log<propto__>(y, f, get_base1(sigma, has_sigma, "sigma", 1)));
                }
                current_statement_begin__ = 467;
                if (as_bool(is_poisson)) {
                    current_statement_begin__ = 467;
                    lp_accum__.add(poisson_log_log<propto__>(y_int, f));
                }
                current_statement_begin__ = 468;
                if (as_bool(is_binomial)) {
                    current_statement_begin__ = 468;
                    lp_accum__.add(binomial_log<propto__>(y_int, trials, f));
                }
            }
            current_statement_begin__ = 472;
            lp_accum__.add(car_normal_lpdf<propto__>(phi, mean_zero, car_precision, car_alpha, car_w, car_v, car_u, D_diag, lambda, n, pstream__));
            current_statement_begin__ = 473;
            lp_accum__.add(student_t_log<propto__>(car_scale, get_base1(sigma_prior, 1, "sigma_prior", 1), get_base1(sigma_prior, 2, "sigma_prior", 1), get_base1(sigma_prior, 3, "sigma_prior", 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("phi");
        names__.push_back("car_precision");
        names__.push_back("car_alpha");
        names__.push_back("intercept");
        names__.push_back("gamma");
        names__.push_back("beta");
        names__.push_back("nu");
        names__.push_back("sigma");
        names__.push_back("alpha_re_tilde");
        names__.push_back("alpha_tau");
        names__.push_back("mu_x_true_bounded");
        names__.push_back("sigma_x_true_bounded");
        names__.push_back("nu_x_true_bounded");
        names__.push_back("mu_x_true_unbounded");
        names__.push_back("sigma_x_true_unbounded");
        names__.push_back("nu_x_true_unbounded");
        names__.push_back("x_true_unbounded");
        names__.push_back("x_true_bounded");
        names__.push_back("aux1_global_me_unbounded");
        names__.push_back("aux2_global_me_unbounded");
        names__.push_back("aux1_local_me_unbounded");
        names__.push_back("aux2_local_me_unbounded");
        names__.push_back("caux_me_unbounded");
        names__.push_back("z_ev_me_unbounded");
        names__.push_back("aux1_global_me_bounded");
        names__.push_back("aux2_global_me_bounded");
        names__.push_back("aux1_local_me_bounded");
        names__.push_back("aux2_local_me_bounded");
        names__.push_back("caux_me_bounded");
        names__.push_back("z_ev_me_bounded");
        names__.push_back("car_scale");
        names__.push_back("x_all");
        names__.push_back("f");
        names__.push_back("log_lik");
        names__.push_back("yrep");
        names__.push_back("residual");
        names__.push_back("fitted");
        names__.push_back("alpha_re");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dwx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(is_student);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_sigma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ids);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_re);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_bounded);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_bounded);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_bounded);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_unbounded);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_unbounded);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_unbounded);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_unbounded);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx_me_bounded);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_unbounded : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_unbounded : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_unbounded : 0 ));
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_unbounded : 0 ));
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_unbounded : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_unbounded : 0 ));
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_bounded : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_bounded : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_bounded : 0 ));
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_bounded : 0 ));
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_bounded : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((spatial_me ? dx_me_bounded : 0 ));
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(dx_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ids);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_car_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi = in__.vector_constrain(n);
        size_t phi_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }
        double car_precision = in__.scalar_lb_constrain(0);
        vars__.push_back(car_precision);
        double car_alpha = in__.scalar_lub_constrain((1 / min(lambda)), (1 / max(lambda)));
        vars__.push_back(car_alpha);
        double intercept = in__.scalar_constrain();
        vars__.push_back(intercept);
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_constrain(dwx);
        size_t gamma_j_1_max__ = dwx;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(dx_all);
        size_t beta_j_1_max__ = dx_all;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        std::vector<double> nu;
        size_t nu_d_0_max__ = is_student;
        nu.reserve(nu_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < nu_d_0_max__; ++d_0__) {
            nu.push_back(in__.scalar_lb_constrain(0));
        }
        size_t nu_k_0_max__ = is_student;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            vars__.push_back(nu[k_0__]);
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = has_sigma;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = has_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re_tilde = in__.vector_constrain(n_ids);
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_re_tilde(j_1__));
        }
        std::vector<double> alpha_tau;
        size_t alpha_tau_d_0_max__ = has_re;
        alpha_tau.reserve(alpha_tau_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_tau_d_0_max__; ++d_0__) {
            alpha_tau.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_tau[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_x_true_bounded = in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), dx_me_bounded);
        size_t mu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_bounded_j_1_max__; ++j_1__) {
            vars__.push_back(mu_x_true_bounded(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_x_true_bounded = in__.vector_lb_constrain(0, dx_me_bounded);
        size_t sigma_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_bounded_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_x_true_bounded(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu_x_true_bounded = in__.vector_lb_constrain(0, dx_me_bounded);
        size_t nu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_bounded_j_1_max__; ++j_1__) {
            vars__.push_back(nu_x_true_bounded(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu_x_true_unbounded = in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), dx_me_unbounded);
        size_t mu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_unbounded_j_1_max__; ++j_1__) {
            vars__.push_back(mu_x_true_unbounded(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_x_true_unbounded = in__.vector_lb_constrain(0, dx_me_unbounded);
        size_t sigma_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_unbounded_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_x_true_unbounded(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu_x_true_unbounded = in__.vector_lb_constrain(0, dx_me_unbounded);
        size_t nu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_unbounded_j_1_max__; ++j_1__) {
            vars__.push_back(nu_x_true_unbounded(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > x_true_unbounded;
        size_t x_true_unbounded_d_0_max__ = dx_me_unbounded;
        x_true_unbounded.reserve(x_true_unbounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < x_true_unbounded_d_0_max__; ++d_0__) {
            x_true_unbounded.push_back(in__.vector_constrain(n));
        }
        size_t x_true_unbounded_j_1_max__ = n;
        size_t x_true_unbounded_k_0_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < x_true_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_unbounded_k_0_max__; ++k_0__) {
                vars__.push_back(x_true_unbounded[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > x_true_bounded;
        size_t x_true_bounded_d_0_max__ = dx_me_bounded;
        x_true_bounded.reserve(x_true_bounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < x_true_bounded_d_0_max__; ++d_0__) {
            x_true_bounded.push_back(in__.vector_lub_constrain(get_base1(bounds, 1, "bounds", 1), get_base1(bounds, 2, "bounds", 1), n));
        }
        size_t x_true_bounded_j_1_max__ = n;
        size_t x_true_bounded_k_0_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < x_true_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_bounded_k_0_max__; ++k_0__) {
                vars__.push_back(x_true_bounded[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_global_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ));
        size_t aux1_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_unbounded_j_1_max__; ++j_1__) {
            vars__.push_back(aux1_global_me_unbounded(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_global_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ));
        size_t aux2_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_unbounded_j_1_max__; ++j_1__) {
            vars__.push_back(aux2_global_me_unbounded(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux1_local_me_unbounded;
        size_t aux1_local_me_unbounded_d_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        aux1_local_me_unbounded.reserve(aux1_local_me_unbounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < aux1_local_me_unbounded_d_0_max__; ++d_0__) {
            aux1_local_me_unbounded.push_back(in__.vector_lb_constrain(0, dev));
        }
        size_t aux1_local_me_unbounded_j_1_max__ = dev;
        size_t aux1_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_unbounded_k_0_max__; ++k_0__) {
                vars__.push_back(aux1_local_me_unbounded[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux2_local_me_unbounded;
        size_t aux2_local_me_unbounded_d_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        aux2_local_me_unbounded.reserve(aux2_local_me_unbounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < aux2_local_me_unbounded_d_0_max__; ++d_0__) {
            aux2_local_me_unbounded.push_back(in__.vector_lb_constrain(0, dev));
        }
        size_t aux2_local_me_unbounded_j_1_max__ = dev;
        size_t aux2_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_unbounded_k_0_max__; ++k_0__) {
                vars__.push_back(aux2_local_me_unbounded[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> caux_me_unbounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_unbounded : 0 ));
        size_t caux_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_unbounded_j_1_max__; ++j_1__) {
            vars__.push_back(caux_me_unbounded(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_ev_me_unbounded;
        size_t z_ev_me_unbounded_d_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        z_ev_me_unbounded.reserve(z_ev_me_unbounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_ev_me_unbounded_d_0_max__; ++d_0__) {
            z_ev_me_unbounded.push_back(in__.vector_constrain(dev));
        }
        size_t z_ev_me_unbounded_j_1_max__ = dev;
        size_t z_ev_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_unbounded_k_0_max__; ++k_0__) {
                vars__.push_back(z_ev_me_unbounded[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_global_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ));
        size_t aux1_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_bounded_j_1_max__; ++j_1__) {
            vars__.push_back(aux1_global_me_bounded(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_global_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ));
        size_t aux2_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_bounded_j_1_max__; ++j_1__) {
            vars__.push_back(aux2_global_me_bounded(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux1_local_me_bounded;
        size_t aux1_local_me_bounded_d_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        aux1_local_me_bounded.reserve(aux1_local_me_bounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < aux1_local_me_bounded_d_0_max__; ++d_0__) {
            aux1_local_me_bounded.push_back(in__.vector_lb_constrain(0, dev));
        }
        size_t aux1_local_me_bounded_j_1_max__ = dev;
        size_t aux1_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_bounded_k_0_max__; ++k_0__) {
                vars__.push_back(aux1_local_me_bounded[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > aux2_local_me_bounded;
        size_t aux2_local_me_bounded_d_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        aux2_local_me_bounded.reserve(aux2_local_me_bounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < aux2_local_me_bounded_d_0_max__; ++d_0__) {
            aux2_local_me_bounded.push_back(in__.vector_lb_constrain(0, dev));
        }
        size_t aux2_local_me_bounded_j_1_max__ = dev;
        size_t aux2_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_bounded_k_0_max__; ++k_0__) {
                vars__.push_back(aux2_local_me_bounded[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> caux_me_bounded = in__.vector_lb_constrain(0, (spatial_me ? dx_me_bounded : 0 ));
        size_t caux_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_bounded_j_1_max__; ++j_1__) {
            vars__.push_back(caux_me_bounded(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_ev_me_bounded;
        size_t z_ev_me_bounded_d_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        z_ev_me_bounded.reserve(z_ev_me_bounded_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_ev_me_bounded_d_0_max__; ++d_0__) {
            z_ev_me_bounded.push_back(in__.vector_constrain(dev));
        }
        size_t z_ev_me_bounded_j_1_max__ = dev;
        size_t z_ev_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_bounded_k_0_max__; ++k_0__) {
                vars__.push_back(z_ev_me_bounded[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 345;
            double car_scale;
            (void) car_scale;  // dummy to suppress unused var warning
            stan::math::initialize(car_scale, DUMMY_VAR__);
            stan::math::fill(car_scale, DUMMY_VAR__);
            stan::math::assign(car_scale,(1 / stan::math::sqrt(car_precision)));
            current_statement_begin__ = 347;
            validate_non_negative_index("x_all", "n", n);
            validate_non_negative_index("x_all", "dx_all", dx_all);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x_all(n, dx_all);
            stan::math::initialize(x_all, DUMMY_VAR__);
            stan::math::fill(x_all, DUMMY_VAR__);
            current_statement_begin__ = 348;
            validate_non_negative_index("f", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> f(n);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 349;
            if (as_bool(dx_obs)) {
                current_statement_begin__ = 349;
                stan::model::assign(x_all, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(x_obs_idx), stan::model::nil_index_list())), 
                            x_obs, 
                            "assigning variable x_all");
            }
            current_statement_begin__ = 350;
            if (as_bool(dx_me_unbounded)) {
                current_statement_begin__ = 350;
                for (int j = 1; j <= dx_me_unbounded; ++j) {
                    current_statement_begin__ = 350;
                    stan::model::assign(x_all, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(x_me_unbounded_idx, j, "x_me_unbounded_idx", 1)), stan::model::nil_index_list())), 
                                get_base1(x_true_unbounded, j, "x_true_unbounded", 1), 
                                "assigning variable x_all");
                }
            }
            current_statement_begin__ = 351;
            if (as_bool(dx_me_bounded)) {
                current_statement_begin__ = 351;
                for (int j = 1; j <= dx_me_bounded; ++j) {
                    current_statement_begin__ = 351;
                    stan::model::assign(x_all, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(x_me_bounded_idx, j, "x_me_bounded_idx", 1)), stan::model::nil_index_list())), 
                                get_base1(x_true_bounded, j, "x_true_bounded", 1), 
                                "assigning variable x_all");
                }
            }
            current_statement_begin__ = 352;
            stan::math::assign(f, add(offset, intercept));
            current_statement_begin__ = 354;
            stan::math::assign(f, add(f, phi));
            current_statement_begin__ = 355;
            if (as_bool(has_re)) {
                current_statement_begin__ = 356;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 357;
                    stan::model::assign(f, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(f, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "f") + (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, get_base1(id, i, "id", 1), "alpha_re_tilde", 1))), 
                                "assigning variable f");
                }
            }
            current_statement_begin__ = 360;
            if (as_bool(dwx)) {
                current_statement_begin__ = 361;
                if (as_bool(has_me)) {
                    current_statement_begin__ = 362;
                    for (int i = 1; i <= dwx; ++i) {
                        current_statement_begin__ = 363;
                        stan::math::assign(f, add(f, multiply(csr_matrix_times_vector(n, n, w, v, u, stan::model::rvalue(x_all, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(wx_idx, i, "wx_idx", 1)), stan::model::nil_index_list())), "x_all")), get_base1(gamma, i, "gamma", 1))));
                    }
                } else {
                    current_statement_begin__ = 366;
                    stan::math::assign(f, add(f, multiply(WX, gamma)));
                }
            }
            current_statement_begin__ = 369;
            if (as_bool(dx_all)) {
                current_statement_begin__ = 369;
                stan::math::assign(f, add(f, multiply(x_all, beta)));
            }
            current_statement_begin__ = 370;
            if (as_bool(is_binomial)) {
                current_statement_begin__ = 370;
                stan::math::assign(f, inv_logit(f));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 345;
            check_greater_or_equal(function__, "car_scale", car_scale, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(car_scale);
                size_t x_all_j_2_max__ = dx_all;
                size_t x_all_j_1_max__ = n;
                for (size_t j_2__ = 0; j_2__ < x_all_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < x_all_j_1_max__; ++j_1__) {
                        vars__.push_back(x_all(j_1__, j_2__));
                    }
                }
                size_t f_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    vars__.push_back(f(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 478;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 479;
            validate_non_negative_index("yrep", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> yrep(n);
            stan::math::initialize(yrep, DUMMY_VAR__);
            stan::math::fill(yrep, DUMMY_VAR__);
            current_statement_begin__ = 480;
            validate_non_negative_index("residual", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> residual(n);
            stan::math::initialize(residual, DUMMY_VAR__);
            stan::math::fill(residual, DUMMY_VAR__);
            current_statement_begin__ = 481;
            validate_non_negative_index("fitted", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted(n);
            stan::math::initialize(fitted, DUMMY_VAR__);
            stan::math::fill(fitted, DUMMY_VAR__);
            current_statement_begin__ = 482;
            validate_non_negative_index("alpha_re", "n_ids", n_ids);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re(n_ids);
            stan::math::initialize(alpha_re, DUMMY_VAR__);
            stan::math::fill(alpha_re, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 483;
            if (as_bool(has_re)) {
                current_statement_begin__ = 484;
                for (int i = 1; i <= n_ids; ++i) {
                    current_statement_begin__ = 485;
                    stan::model::assign(alpha_re, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, i, "alpha_re_tilde", 1)), 
                                "assigning variable alpha_re");
                }
            }
            current_statement_begin__ = 492;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 493;
                if (as_bool(is_student)) {
                    current_statement_begin__ = 494;
                    stan::model::assign(fitted, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(f, i, "f", 1), 
                                "assigning variable fitted");
                    current_statement_begin__ = 495;
                    stan::model::assign(residual, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(y, i, "y", 1) - get_base1(fitted, i, "fitted", 1)), 
                                "assigning variable residual");
                    current_statement_begin__ = 496;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                student_t_log(get_base1(y, i, "y", 1), get_base1(nu, 1, "nu", 1), get_base1(fitted, i, "fitted", 1), get_base1(sigma, has_sigma, "sigma", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 497;
                    stan::model::assign(yrep, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                student_t_rng(get_base1(nu, 1, "nu", 1), get_base1(fitted, i, "fitted", 1), get_base1(sigma, has_sigma, "sigma", 1), base_rng__), 
                                "assigning variable yrep");
                }
                current_statement_begin__ = 499;
                if (as_bool(is_gaussian)) {
                    current_statement_begin__ = 500;
                    stan::model::assign(fitted, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(f, i, "f", 1), 
                                "assigning variable fitted");
                    current_statement_begin__ = 501;
                    stan::model::assign(residual, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(y, i, "y", 1) - get_base1(fitted, i, "fitted", 1)), 
                                "assigning variable residual");
                    current_statement_begin__ = 502;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                normal_log(get_base1(y, i, "y", 1), get_base1(fitted, i, "fitted", 1), get_base1(sigma, has_sigma, "sigma", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 503;
                    stan::model::assign(yrep, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                normal_rng(get_base1(fitted, i, "fitted", 1), get_base1(sigma, has_sigma, "sigma", 1), base_rng__), 
                                "assigning variable yrep");
                }
                current_statement_begin__ = 505;
                if (as_bool(is_poisson)) {
                    current_statement_begin__ = 506;
                    stan::model::assign(fitted, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::exp(get_base1(f, i, "f", 1)), 
                                "assigning variable fitted");
                    current_statement_begin__ = 507;
                    stan::model::assign(residual, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(fitted, i, "fitted", 1) - get_base1(y_int, i, "y_int", 1)), 
                                "assigning variable residual");
                    current_statement_begin__ = 508;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                poisson_log_log(get_base1(y_int, i, "y_int", 1), get_base1(f, i, "f", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 509;
                    if (as_bool(logical_gt(get_base1(f, i, "f", 1), 20))) {
                        current_statement_begin__ = 510;
                        if (pstream__) {
                            stan_print(pstream__,"f[i] too large (>20) for poisson_log_rng");
                            *pstream__ << std::endl;
                        }
                        current_statement_begin__ = 511;
                        stan::model::assign(yrep, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    -(1), 
                                    "assigning variable yrep");
                    } else {
                        current_statement_begin__ = 513;
                        stan::model::assign(yrep, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    poisson_log_rng(get_base1(f, i, "f", 1), base_rng__), 
                                    "assigning variable yrep");
                    }
                }
                current_statement_begin__ = 516;
                if (as_bool(is_binomial)) {
                    current_statement_begin__ = 517;
                    stan::model::assign(fitted, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(f, i, "f", 1), 
                                "assigning variable fitted");
                    current_statement_begin__ = 518;
                    stan::model::assign(residual, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (((get_base1(f, i, "f", 1) * get_base1(trials, i, "trials", 1)) - get_base1(y_int, i, "y_int", 1)) / get_base1(trials, i, "trials", 1)), 
                                "assigning variable residual");
                    current_statement_begin__ = 519;
                    stan::model::assign(yrep, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                binomial_rng(get_base1(trials, i, "trials", 1), get_base1(f, i, "f", 1), base_rng__), 
                                "assigning variable yrep");
                    current_statement_begin__ = 520;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                binomial_log(get_base1(y_int, i, "y_int", 1), get_base1(trials, i, "trials", 1), get_base1(f, i, "f", 1)), 
                                "assigning variable log_lik");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 478;
            size_t log_lik_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 479;
            size_t yrep_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
                vars__.push_back(yrep(j_1__));
            }
            current_statement_begin__ = 480;
            size_t residual_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
                vars__.push_back(residual(j_1__));
            }
            current_statement_begin__ = 481;
            size_t fitted_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
                vars__.push_back(fitted(j_1__));
            }
            current_statement_begin__ = 482;
            size_t alpha_re_j_1_max__ = n_ids;
            for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
                vars__.push_back(alpha_re(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_car";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t phi_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "car_precision";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "car_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t gamma_j_1_max__ = dwx;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = dx_all;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_k_0_max__ = is_student;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = has_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_x_true_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_x_true_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_x_true_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_x_true_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_x_true_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_x_true_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x_true_unbounded_j_1_max__ = n;
        size_t x_true_unbounded_k_0_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < x_true_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_true_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t x_true_bounded_j_1_max__ = n;
        size_t x_true_bounded_k_0_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < x_true_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_true_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux1_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_global_me_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_global_me_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux1_local_me_unbounded_j_1_max__ = dev;
        size_t aux1_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux1_local_me_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux2_local_me_unbounded_j_1_max__ = dev;
        size_t aux2_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux2_local_me_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t caux_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "caux_me_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_ev_me_unbounded_j_1_max__ = dev;
        size_t z_ev_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_ev_me_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux1_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_global_me_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_global_me_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux1_local_me_bounded_j_1_max__ = dev;
        size_t aux1_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux1_local_me_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux2_local_me_bounded_j_1_max__ = dev;
        size_t aux2_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux2_local_me_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t caux_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "caux_me_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_ev_me_bounded_j_1_max__ = dev;
        size_t z_ev_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_ev_me_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "car_scale";
            param_names__.push_back(param_name_stream__.str());
            size_t x_all_j_2_max__ = dx_all;
            size_t x_all_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_all_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_all_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x_all" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t yrep_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yrep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t phi_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "car_precision";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "car_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t gamma_j_1_max__ = dwx;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = dx_all;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_k_0_max__ = is_student;
        for (size_t k_0__ = 0; k_0__ < nu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = has_sigma;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_x_true_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_x_true_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_x_true_bounded_j_1_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_x_true_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < mu_x_true_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_x_true_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < sigma_x_true_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_x_true_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_x_true_unbounded_j_1_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < nu_x_true_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_x_true_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x_true_unbounded_j_1_max__ = n;
        size_t x_true_unbounded_k_0_max__ = dx_me_unbounded;
        for (size_t j_1__ = 0; j_1__ < x_true_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_true_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t x_true_bounded_j_1_max__ = n;
        size_t x_true_bounded_k_0_max__ = dx_me_bounded;
        for (size_t j_1__ = 0; j_1__ < x_true_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < x_true_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_true_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux1_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_global_me_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_global_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_global_me_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux1_local_me_unbounded_j_1_max__ = dev;
        size_t aux1_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux1_local_me_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux2_local_me_unbounded_j_1_max__ = dev;
        size_t aux2_local_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux2_local_me_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t caux_me_unbounded_j_1_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_unbounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "caux_me_unbounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_ev_me_unbounded_j_1_max__ = dev;
        size_t z_ev_me_unbounded_k_0_max__ = (spatial_me ? dx_me_unbounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_unbounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_unbounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_ev_me_unbounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux1_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_global_me_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_global_me_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_global_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_global_me_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_global_me_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux1_local_me_bounded_j_1_max__ = dev;
        size_t aux1_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux1_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux1_local_me_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux1_local_me_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t aux2_local_me_bounded_j_1_max__ = dev;
        size_t aux2_local_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < aux2_local_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < aux2_local_me_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aux2_local_me_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t caux_me_bounded_j_1_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < caux_me_bounded_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "caux_me_bounded" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_ev_me_bounded_j_1_max__ = dev;
        size_t z_ev_me_bounded_k_0_max__ = (spatial_me ? dx_me_bounded : 0 );
        for (size_t j_1__ = 0; j_1__ < z_ev_me_bounded_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_ev_me_bounded_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_ev_me_bounded" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "car_scale";
            param_names__.push_back(param_name_stream__.str());
            size_t x_all_j_2_max__ = dx_all;
            size_t x_all_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_all_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_all_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x_all" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t yrep_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yrep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_car_namespace::model_car stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
