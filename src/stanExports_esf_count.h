// Generated by rstantools.  Do not edit by hand.

/*
    geostan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    geostan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with geostan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_esf_count_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_esf_count");
    reader.add_event(101, 99, "end", "model_esf_count");
    return reader;
}
#include <stan_meta_header.hpp>
class model_esf_count : public prob_grad {
private:
        int n;
        int dx;
        int dev;
        matrix_d EV;
        matrix_d x;
        std::vector<int> y;
        vector_d offset;
        int has_re;
        int n_ids;
        std::vector<int> id;
        double scale_global;
        double slab_scale;
        double slab_df;
        vector_d alpha_prior;
        std::vector<row_vector_d> beta_prior;
        vector_d alpha_tau_prior;
        double nu_global;
        double nu_local;
        vector_d log_E;
public:
    model_esf_count(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_esf_count(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_esf_count_namespace::model_esf_count";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "dx", "int", context__.to_vec());
            dx = int(0);
            vals_i__ = context__.vals_i("dx");
            pos__ = 0;
            dx = vals_i__[pos__++];
            check_greater_or_equal(function__, "dx", dx, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "dev", "int", context__.to_vec());
            dev = int(0);
            vals_i__ = context__.vals_i("dev");
            pos__ = 0;
            dev = vals_i__[pos__++];
            check_greater_or_equal(function__, "dev", dev, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("EV", "n", n);
            validate_non_negative_index("EV", "dev", dev);
            context__.validate_dims("data initialization", "EV", "matrix_d", context__.to_vec(n,dev));
            EV = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, dev);
            vals_r__ = context__.vals_r("EV");
            pos__ = 0;
            size_t EV_j_2_max__ = dev;
            size_t EV_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < EV_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < EV_j_1_max__; ++j_1__) {
                    EV(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("x", "n", n);
            validate_non_negative_index("x", "dx", dx);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n,dx));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, dx);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = dx;
            size_t x_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(n));
            y = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("offset", "n", n);
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec(n));
            offset = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < offset_j_1_max__; ++j_1__) {
                offset(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "has_re", "int", context__.to_vec());
            has_re = int(0);
            vals_i__ = context__.vals_i("has_re");
            pos__ = 0;
            has_re = vals_i__[pos__++];
            check_greater_or_equal(function__, "has_re", has_re, 0);
            check_less_or_equal(function__, "has_re", has_re, 1);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n_ids", "int", context__.to_vec());
            n_ids = int(0);
            vals_i__ = context__.vals_i("n_ids");
            pos__ = 0;
            n_ids = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_ids", n_ids, 0);
            current_statement_begin__ = 11;
            validate_non_negative_index("id", "n", n);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(n));
            id = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            size_t id_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "id[i_0__]", id[i_0__], 0);
                check_less_or_equal(function__, "id[i_0__]", id[i_0__], n_ids);
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "scale_global", "double", context__.to_vec());
            scale_global = double(0);
            vals_r__ = context__.vals_r("scale_global");
            pos__ = 0;
            scale_global = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale_global", scale_global, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "slab_scale", "double", context__.to_vec());
            slab_scale = double(0);
            vals_r__ = context__.vals_r("slab_scale");
            pos__ = 0;
            slab_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "slab_scale", slab_scale, 0);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "slab_df", "double", context__.to_vec());
            slab_df = double(0);
            vals_r__ = context__.vals_r("slab_df");
            pos__ = 0;
            slab_df = vals_r__[pos__++];
            check_greater_or_equal(function__, "slab_df", slab_df, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("alpha_prior", "3", 3);
            context__.validate_dims("data initialization", "alpha_prior", "vector_d", context__.to_vec(3));
            alpha_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("alpha_prior");
            pos__ = 0;
            size_t alpha_prior_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < alpha_prior_j_1_max__; ++j_1__) {
                alpha_prior(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("beta_prior", "dx", dx);
            validate_non_negative_index("beta_prior", "3", 3);
            context__.validate_dims("data initialization", "beta_prior", "row_vector_d", context__.to_vec(3,dx));
            beta_prior = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(3, Eigen::Matrix<double, 1, Eigen::Dynamic>(dx));
            vals_r__ = context__.vals_r("beta_prior");
            pos__ = 0;
            size_t beta_prior_j_1_max__ = dx;
            size_t beta_prior_k_0_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < beta_prior_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_prior_k_0_max__; ++k_0__) {
                    beta_prior[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("alpha_tau_prior", "3", 3);
            context__.validate_dims("data initialization", "alpha_tau_prior", "vector_d", context__.to_vec(3));
            alpha_tau_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("alpha_tau_prior");
            pos__ = 0;
            size_t alpha_tau_prior_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < alpha_tau_prior_j_1_max__; ++j_1__) {
                alpha_tau_prior(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 21;
            nu_global = double(0);
            stan::math::fill(nu_global, DUMMY_VAR__);
            current_statement_begin__ = 22;
            nu_local = double(0);
            stan::math::fill(nu_local, DUMMY_VAR__);
            current_statement_begin__ = 23;
            validate_non_negative_index("log_E", "n", n);
            log_E = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            stan::math::fill(log_E, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 24;
            stan::math::assign(nu_global, 1);
            current_statement_begin__ = 25;
            stan::math::assign(nu_local, 1);
            current_statement_begin__ = 26;
            stan::math::assign(log_E, stan::math::log(offset));
            // validate transformed data
            current_statement_begin__ = 21;
            check_greater_or_equal(function__, "nu_global", nu_global, 1);
            current_statement_begin__ = 22;
            check_greater_or_equal(function__, "nu_local", nu_local, 1);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            validate_non_negative_index("beta", "dx", dx);
            num_params_r__ += dx;
            current_statement_begin__ = 32;
            validate_non_negative_index("alpha_re_tilde", "n_ids", n_ids);
            num_params_r__ += n_ids;
            current_statement_begin__ = 33;
            validate_non_negative_index("alpha_tau", "has_re", has_re);
            num_params_r__ += (1 * has_re);
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            validate_non_negative_index("aux1_local", "dev", dev);
            num_params_r__ += dev;
            current_statement_begin__ = 37;
            validate_non_negative_index("aux2_local", "dev", dev);
            num_params_r__ += dev;
            current_statement_begin__ = 38;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            validate_non_negative_index("z", "dev", dev);
            num_params_r__ += dev;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_esf_count() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 30;
        if (!(context__.contains_r("intercept")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable intercept missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("intercept");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "intercept", "double", context__.to_vec());
        double intercept(0);
        intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable intercept: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "dx", dx);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(dx));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(dx);
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("alpha_re_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_re_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_re_tilde");
        pos__ = 0U;
        validate_non_negative_index("alpha_re_tilde", "n_ids", n_ids);
        context__.validate_dims("parameter initialization", "alpha_re_tilde", "vector_d", context__.to_vec(n_ids));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re_tilde(n_ids);
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            alpha_re_tilde(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha_re_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_re_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("alpha_tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_tau");
        pos__ = 0U;
        validate_non_negative_index("alpha_tau", "has_re", has_re);
        context__.validate_dims("parameter initialization", "alpha_tau", "double", context__.to_vec(has_re));
        std::vector<double> alpha_tau(has_re, double(0));
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            alpha_tau[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_tau_i_0_max__ = has_re;
        for (size_t i_0__ = 0; i_0__ < alpha_tau_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha_tau[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_tau: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("aux1_global")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_global missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_global");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "aux1_global", "double", context__.to_vec());
        double aux1_global(0);
        aux1_global = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, aux1_global);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_global: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("aux2_global")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_global missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_global");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "aux2_global", "double", context__.to_vec());
        double aux2_global(0);
        aux2_global = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, aux2_global);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_global: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("aux1_local")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux1_local missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux1_local");
        pos__ = 0U;
        validate_non_negative_index("aux1_local", "dev", dev);
        context__.validate_dims("parameter initialization", "aux1_local", "vector_d", context__.to_vec(dev));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_local(dev);
        size_t aux1_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            aux1_local(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux1_local);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux1_local: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("aux2_local")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable aux2_local missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("aux2_local");
        pos__ = 0U;
        validate_non_negative_index("aux2_local", "dev", dev);
        context__.validate_dims("parameter initialization", "aux2_local", "vector_d", context__.to_vec(dev));
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_local(dev);
        size_t aux2_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            aux2_local(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, aux2_local);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable aux2_local: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("caux")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable caux missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("caux");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "caux", "double", context__.to_vec());
        double caux(0);
        caux = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, caux);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable caux: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "dev", dev);
        context__.validate_dims("parameter initialization", "z", "vector_d", context__.to_vec(dev));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z(dev);
        size_t z_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            z(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 30;
            local_scalar_t__ intercept;
            (void) intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                intercept = in__.scalar_constrain(lp__);
            else
                intercept = in__.scalar_constrain();
            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(dx, lp__);
            else
                beta = in__.vector_constrain(dx);
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_re_tilde;
            (void) alpha_re_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_re_tilde = in__.vector_constrain(n_ids, lp__);
            else
                alpha_re_tilde = in__.vector_constrain(n_ids);
            current_statement_begin__ = 33;
            std::vector<local_scalar_t__> alpha_tau;
            size_t alpha_tau_d_0_max__ = has_re;
            alpha_tau.reserve(alpha_tau_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_tau_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_tau.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha_tau.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 34;
            local_scalar_t__ aux1_global;
            (void) aux1_global;  // dummy to suppress unused var warning
            if (jacobian__)
                aux1_global = in__.scalar_lb_constrain(0, lp__);
            else
                aux1_global = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 35;
            local_scalar_t__ aux2_global;
            (void) aux2_global;  // dummy to suppress unused var warning
            if (jacobian__)
                aux2_global = in__.scalar_lb_constrain(0, lp__);
            else
                aux2_global = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 36;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux1_local;
            (void) aux1_local;  // dummy to suppress unused var warning
            if (jacobian__)
                aux1_local = in__.vector_lb_constrain(0, dev, lp__);
            else
                aux1_local = in__.vector_lb_constrain(0, dev);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> aux2_local;
            (void) aux2_local;  // dummy to suppress unused var warning
            if (jacobian__)
                aux2_local = in__.vector_lb_constrain(0, dev, lp__);
            else
                aux2_local = in__.vector_lb_constrain(0, dev);
            current_statement_begin__ = 38;
            local_scalar_t__ caux;
            (void) caux;  // dummy to suppress unused var warning
            if (jacobian__)
                caux = in__.scalar_lb_constrain(0, lp__);
            else
                caux = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 39;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.vector_constrain(dev, lp__);
            else
                z = in__.vector_constrain(dev);
            // transformed parameters
            current_statement_begin__ = 44;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("lambda", "dev", dev);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda(dev);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("lambda_tilde", "dev", dev);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_tilde(dev);
            stan::math::initialize(lambda_tilde, DUMMY_VAR__);
            stan::math::fill(lambda_tilde, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("beta_ev", "dev", dev);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_ev(dev);
            stan::math::initialize(beta_ev, DUMMY_VAR__);
            stan::math::fill(beta_ev, DUMMY_VAR__);
            current_statement_begin__ = 48;
            local_scalar_t__ c;
            (void) c;  // dummy to suppress unused var warning
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("f", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f(n);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 50;
            stan::math::assign(tau, ((aux1_global * stan::math::sqrt(aux2_global)) * scale_global));
            current_statement_begin__ = 51;
            stan::math::assign(lambda, elt_multiply(aux1_local, stan::math::sqrt(aux2_local)));
            current_statement_begin__ = 52;
            stan::math::assign(c, (slab_scale * stan::math::sqrt(caux)));
            current_statement_begin__ = 53;
            stan::math::assign(lambda_tilde, stan::math::sqrt(elt_divide(multiply(pow(c, 2), square(lambda)), add(pow(c, 2), multiply(pow(tau, 2), square(lambda))))));
            current_statement_begin__ = 54;
            stan::math::assign(beta_ev, multiply(elt_multiply(z, lambda_tilde), tau));
            current_statement_begin__ = 55;
            stan::math::assign(f, add(add(log_E, intercept), multiply(EV, beta_ev)));
            current_statement_begin__ = 56;
            if (as_bool(dx)) {
                current_statement_begin__ = 56;
                stan::math::assign(f, add(f, multiply(x, beta)));
            }
            current_statement_begin__ = 57;
            if (as_bool(has_re)) {
                current_statement_begin__ = 58;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 59;
                    stan::model::assign(f, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(f, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "f") + (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, get_base1(id, i, "id", 1), "alpha_re_tilde", 1))), 
                                "assigning variable f");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            if (stan::math::is_uninitialized(tau)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 45;
            size_t lambda_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lambda", lambda, 0);
            current_statement_begin__ = 46;
            size_t lambda_tilde_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < lambda_tilde_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_tilde(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_tilde" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_tilde: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lambda_tilde", lambda_tilde, 0);
            current_statement_begin__ = 47;
            size_t beta_ev_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < beta_ev_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta_ev(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta_ev" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_ev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 48;
            if (stan::math::is_uninitialized(c)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: c";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable c: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "c", c, 0);
            current_statement_begin__ = 49;
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(f(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: f" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 65;
            lp_accum__.add(poisson_log_log<propto__>(y, f));
            current_statement_begin__ = 66;
            lp_accum__.add(std_normal_log<propto__>(z));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(aux1_local, 0, 1));
            current_statement_begin__ = 68;
            lp_accum__.add(inv_gamma_log<propto__>(aux2_local, (0.5 * nu_local), (0.5 * nu_local)));
            current_statement_begin__ = 69;
            lp_accum__.add(std_normal_log<propto__>(aux1_global));
            current_statement_begin__ = 70;
            lp_accum__.add(inv_gamma_log<propto__>(aux2_global, (0.5 * nu_global), (0.5 * nu_global)));
            current_statement_begin__ = 71;
            lp_accum__.add(inv_gamma_log<propto__>(caux, (0.5 * slab_df), (0.5 * slab_df)));
            current_statement_begin__ = 72;
            lp_accum__.add(student_t_log<propto__>(intercept, get_base1(alpha_prior, 1, "alpha_prior", 1), get_base1(alpha_prior, 2, "alpha_prior", 1), get_base1(alpha_prior, 3, "alpha_prior", 1)));
            current_statement_begin__ = 73;
            if (as_bool(dx)) {
                current_statement_begin__ = 73;
                lp_accum__.add(student_t_log<propto__>(beta, get_base1(beta_prior, 1, "beta_prior", 1), get_base1(beta_prior, 2, "beta_prior", 1), get_base1(beta_prior, 3, "beta_prior", 1)));
            }
            current_statement_begin__ = 74;
            if (as_bool(has_re)) {
                current_statement_begin__ = 75;
                lp_accum__.add(student_t_log<propto__>(get_base1(alpha_tau, has_re, "alpha_tau", 1), get_base1(alpha_tau_prior, 1, "alpha_tau_prior", 1), get_base1(alpha_tau_prior, 2, "alpha_tau_prior", 1), get_base1(alpha_tau_prior, 3, "alpha_tau_prior", 1)));
                current_statement_begin__ = 76;
                lp_accum__.add(std_normal_log<propto__>(alpha_re_tilde));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("intercept");
        names__.push_back("beta");
        names__.push_back("alpha_re_tilde");
        names__.push_back("alpha_tau");
        names__.push_back("aux1_global");
        names__.push_back("aux2_global");
        names__.push_back("aux1_local");
        names__.push_back("aux2_local");
        names__.push_back("caux");
        names__.push_back("z");
        names__.push_back("tau");
        names__.push_back("lambda");
        names__.push_back("lambda_tilde");
        names__.push_back("beta_ev");
        names__.push_back("c");
        names__.push_back("f");
        names__.push_back("yrep");
        names__.push_back("fitted");
        names__.push_back("esf");
        names__.push_back("residual");
        names__.push_back("log_lik");
        names__.push_back("alpha_re");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ids);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(has_re);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dev);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ids);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_esf_count_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double intercept = in__.scalar_constrain();
        vars__.push_back(intercept);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(dx);
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re_tilde = in__.vector_constrain(n_ids);
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_re_tilde(j_1__));
        }
        std::vector<double> alpha_tau;
        size_t alpha_tau_d_0_max__ = has_re;
        alpha_tau.reserve(alpha_tau_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_tau_d_0_max__; ++d_0__) {
            alpha_tau.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_tau[k_0__]);
        }
        double aux1_global = in__.scalar_lb_constrain(0);
        vars__.push_back(aux1_global);
        double aux2_global = in__.scalar_lb_constrain(0);
        vars__.push_back(aux2_global);
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux1_local = in__.vector_lb_constrain(0, dev);
        size_t aux1_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            vars__.push_back(aux1_local(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> aux2_local = in__.vector_lb_constrain(0, dev);
        size_t aux2_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            vars__.push_back(aux2_local(j_1__));
        }
        double caux = in__.scalar_lb_constrain(0);
        vars__.push_back(caux);
        Eigen::Matrix<double, Eigen::Dynamic, 1> z = in__.vector_constrain(dev);
        size_t z_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            vars__.push_back(z(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 44;
            double tau;
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("lambda", "dev", dev);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda(dev);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("lambda_tilde", "dev", dev);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_tilde(dev);
            stan::math::initialize(lambda_tilde, DUMMY_VAR__);
            stan::math::fill(lambda_tilde, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("beta_ev", "dev", dev);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta_ev(dev);
            stan::math::initialize(beta_ev, DUMMY_VAR__);
            stan::math::fill(beta_ev, DUMMY_VAR__);
            current_statement_begin__ = 48;
            double c;
            (void) c;  // dummy to suppress unused var warning
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("f", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> f(n);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 50;
            stan::math::assign(tau, ((aux1_global * stan::math::sqrt(aux2_global)) * scale_global));
            current_statement_begin__ = 51;
            stan::math::assign(lambda, elt_multiply(aux1_local, stan::math::sqrt(aux2_local)));
            current_statement_begin__ = 52;
            stan::math::assign(c, (slab_scale * stan::math::sqrt(caux)));
            current_statement_begin__ = 53;
            stan::math::assign(lambda_tilde, stan::math::sqrt(elt_divide(multiply(pow(c, 2), square(lambda)), add(pow(c, 2), multiply(pow(tau, 2), square(lambda))))));
            current_statement_begin__ = 54;
            stan::math::assign(beta_ev, multiply(elt_multiply(z, lambda_tilde), tau));
            current_statement_begin__ = 55;
            stan::math::assign(f, add(add(log_E, intercept), multiply(EV, beta_ev)));
            current_statement_begin__ = 56;
            if (as_bool(dx)) {
                current_statement_begin__ = 56;
                stan::math::assign(f, add(f, multiply(x, beta)));
            }
            current_statement_begin__ = 57;
            if (as_bool(has_re)) {
                current_statement_begin__ = 58;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 59;
                    stan::model::assign(f, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(f, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "f") + (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, get_base1(id, i, "id", 1), "alpha_re_tilde", 1))), 
                                "assigning variable f");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 45;
            check_greater_or_equal(function__, "lambda", lambda, 0);
            current_statement_begin__ = 46;
            check_greater_or_equal(function__, "lambda_tilde", lambda_tilde, 0);
            current_statement_begin__ = 48;
            check_greater_or_equal(function__, "c", c, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(tau);
                size_t lambda_j_1_max__ = dev;
                for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda(j_1__));
                }
                size_t lambda_tilde_j_1_max__ = dev;
                for (size_t j_1__ = 0; j_1__ < lambda_tilde_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_tilde(j_1__));
                }
                size_t beta_ev_j_1_max__ = dev;
                for (size_t j_1__ = 0; j_1__ < beta_ev_j_1_max__; ++j_1__) {
                    vars__.push_back(beta_ev(j_1__));
                }
                vars__.push_back(c);
                size_t f_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    vars__.push_back(f(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 81;
            validate_non_negative_index("yrep", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> yrep(n);
            stan::math::initialize(yrep, DUMMY_VAR__);
            stan::math::fill(yrep, DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("fitted", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fitted(n);
            stan::math::initialize(fitted, DUMMY_VAR__);
            stan::math::fill(fitted, DUMMY_VAR__);
            current_statement_begin__ = 83;
            validate_non_negative_index("esf", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> esf(n);
            stan::math::initialize(esf, DUMMY_VAR__);
            stan::math::fill(esf, DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("residual", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> residual(n);
            stan::math::initialize(residual, DUMMY_VAR__);
            stan::math::fill(residual, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("alpha_re", "n_ids", n_ids);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_re(n_ids);
            stan::math::initialize(alpha_re, DUMMY_VAR__);
            stan::math::fill(alpha_re, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 87;
            if (as_bool(has_re)) {
                current_statement_begin__ = 88;
                for (int i = 1; i <= n_ids; ++i) {
                    current_statement_begin__ = 89;
                    stan::model::assign(alpha_re, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(alpha_tau, has_re, "alpha_tau", 1) * get_base1(alpha_re_tilde, i, "alpha_re_tilde", 1)), 
                                "assigning variable alpha_re");
                }
            }
            current_statement_begin__ = 92;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 93;
                stan::model::assign(fitted, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(f, i, "f", 1)), 
                            "assigning variable fitted");
                current_statement_begin__ = 94;
                stan::model::assign(residual, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(fitted, i, "fitted", 1) - get_base1(y, i, "y", 1)), 
                            "assigning variable residual");
                current_statement_begin__ = 95;
                stan::model::assign(yrep, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            poisson_log_rng(get_base1(f, i, "f", 1), base_rng__), 
                            "assigning variable yrep");
                current_statement_begin__ = 96;
                stan::model::assign(esf, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(get_base1(EV, i, "EV", 1), beta_ev), 
                            "assigning variable esf");
                current_statement_begin__ = 97;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            poisson_log_log(get_base1(y, i, "y", 1), get_base1(f, i, "f", 1)), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 81;
            size_t yrep_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
                vars__.push_back(yrep(j_1__));
            }
            current_statement_begin__ = 82;
            size_t fitted_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
                vars__.push_back(fitted(j_1__));
            }
            current_statement_begin__ = 83;
            size_t esf_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < esf_j_1_max__; ++j_1__) {
                vars__.push_back(esf(j_1__));
            }
            current_statement_begin__ = 84;
            size_t residual_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
                vars__.push_back(residual(j_1__));
            }
            current_statement_begin__ = 85;
            size_t log_lik_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 86;
            size_t alpha_re_j_1_max__ = n_ids;
            for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
                vars__.push_back(alpha_re(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_esf_count";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux1_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux2_global";
        param_names__.push_back(param_name_stream__.str());
        size_t aux1_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "caux";
        param_names__.push_back(param_name_stream__.str());
        size_t z_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_tilde_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < lambda_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_tilde" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_ev_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < beta_ev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_ev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "c";
            param_names__.push_back(param_name_stream__.str());
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yrep_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yrep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t esf_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < esf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "esf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = dx;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_tilde_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_tau_k_0_max__ = has_re;
        for (size_t k_0__ = 0; k_0__ < alpha_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux1_global";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aux2_global";
        param_names__.push_back(param_name_stream__.str());
        size_t aux1_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux1_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux1_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t aux2_local_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < aux2_local_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aux2_local" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "caux";
        param_names__.push_back(param_name_stream__.str());
        size_t z_j_1_max__ = dev;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau";
            param_names__.push_back(param_name_stream__.str());
            size_t lambda_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_tilde_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < lambda_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_tilde" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_ev_j_1_max__ = dev;
            for (size_t j_1__ = 0; j_1__ < beta_ev_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_ev" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "c";
            param_names__.push_back(param_name_stream__.str());
            size_t f_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yrep_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < yrep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yrep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fitted_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fitted_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fitted" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t esf_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < esf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "esf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_re_j_1_max__ = n_ids;
        for (size_t j_1__ = 0; j_1__ < alpha_re_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_re" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_esf_count_namespace::model_esf_count stan_model;
#endif
